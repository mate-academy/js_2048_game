{"mappings":"A,I,E,E,C,ECIA,MAAM,EAAO,G,C,C,ECFb,MACE,YAAY,EAAe,IAAI,CAAE,CAC/B,IAAI,CAAC,IAAI,CAAG,EACZ,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,OACd,IAAI,CAAC,YAAY,CAAG,EAEpB,IAAI,CAAC,KAAK,CAAG,EACT,EAAa,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,EAClC,IAAI,CAAC,gBAAgB,GACzB,IAAI,CAAC,SAAS,CAAG,IACnB,CAEA,kBAAmB,CACjB,OAAO,MAAM,IAAI,CAAC,CAAE,OAAQ,IAAI,CAAC,IAAI,AAAC,EAAG,IAAM,MAAM,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GACvE,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,WAAY,CACV,OAAO,IAAI,CAAC,MAAM,AACpB,CAEA,OAAQ,CACc,SAAhB,IAAI,CAAC,MAAM,GAIf,IAAI,CAAC,MAAM,CAAG,UACd,IAAI,CAAC,eAAe,GACpB,IAAI,CAAC,eAAe,GACtB,CAEA,SAAU,CACR,IAAI,CAAC,MAAM,CAAG,OACd,IAAI,CAAC,KAAK,CAAG,EAEb,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAC1B,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,EACvC,IAAI,CAAC,gBAAgB,EAC3B,CAGA,UAAW,CACT,IAAI,CAAC,QAAQ,CAAC,OAChB,CAEA,WAAY,CACV,IAAI,CAAC,QAAQ,CAAC,QAChB,CAEA,QAAS,CACP,IAAI,CAAC,QAAQ,CAAC,KAChB,CAEA,UAAW,CACT,IAAI,CAAC,QAAQ,CAAC,OAChB,CAGA,SAAS,CAAS,CAAE,EAAY,CAAA,CAAK,CAAE,CACjB,YAAhB,IAAI,CAAC,MAAM,GAKf,IAAI,CAAC,SAAS,CAAG,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,EAGtC,CAAA,AAAc,OAAd,GAAsB,AAAc,SAAd,CAAc,GACtC,CAAA,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAA,EAIpC,CAAA,AAAc,UAAd,GAAyB,AAAc,SAAd,CAAc,GACzC,CAAA,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAQ,EAAI,OAAO,GADlD,EAKA,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAQ,IAAI,CAAC,QAAQ,CAAC,IAE9C,GAEH,CAAA,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAQ,IAAI,CAAC,QAAQ,CAAC,GAAnD,EAIE,CAAA,AAAc,UAAd,GAAyB,AAAc,SAAd,CAAc,GACzC,CAAA,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAQ,EAAI,OAAO,GADlD,EAII,CAAA,AAAc,OAAd,GAAsB,AAAc,SAAd,CAAc,GACtC,CAAA,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAA,EAIpC,IAAI,CAAC,SAAS,GAAK,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,IAC9C,IAAI,CAAC,eAAe,GACpB,IAAI,CAAC,eAAe,IAExB,CAGA,SAAS,CAAG,CAAE,CACZ,IAAM,EAAc,EAAI,MAAM,CAAC,AAAC,GAAS,AAAS,IAAT,GAEzC,MAAO,IAAI,KAAgB,MAAM,IAAI,CAAC,IAAI,CAAG,EAAY,MAAM,EAAE,IAAI,CAAC,GAAG,AAC3E,CAEA,SAAS,CAAG,CAAE,CACZ,IAAM,EAAc,EAAI,MAAM,CAAC,AAAC,GAAS,AAAS,IAAT,GAEzC,MAAO,IAAI,MAAM,IAAI,CAAC,IAAI,CAAG,EAAY,MAAM,EAAE,IAAI,CAAC,MAAO,EAAY,AAC3E,CAGA,SAAS,CAAG,CAAE,CACZ,IAAK,IAAI,EAAI,EAAG,EAAI,EAAI,MAAM,CAAG,EAAG,IACnB,IAAX,CAAG,CAAC,EAAE,EAAU,CAAG,CAAC,EAAE,GAAK,CAAG,CAAC,EAAI,EAAE,GACvC,CAAG,CAAC,EAAE,EAAI,EACV,CAAG,CAAC,EAAI,EAAE,CAAG,EACb,IAAI,CAAC,KAAK,EAAI,CAAG,CAAC,EAAE,EAIxB,OAAO,IAAI,CAAC,QAAQ,CAAC,EACvB,CAGA,iBAAkB,CAChB,IAAM,EAAa,EAAE,CAErB,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAC7B,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IACJ,IAArB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAClB,EAAW,IAAI,CAAC,CAAC,EAAG,EAAE,EAK5B,GAAI,AAAsB,IAAtB,EAAW,MAAM,CACnB,OAGF,GAAM,CAAC,EAAG,EAAE,CAAG,CAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,AAExE,CAAA,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CAC/C,CAGA,UAAU,CAAK,CAAE,CACf,OAAO,CAAK,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAG,IAEtB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAQ,CAAG,CAAC,EAAS,EACzC,CAGA,aAAc,CACZ,GAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC,GAAQ,EAAI,QAAQ,CAAC,IACxC,MAAO,CAAA,EAGT,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAC7B,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAG,EAAG,IACjC,GAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAK,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAI,EAAE,EAIzC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,EAAE,CAAC,EAAE,CAH3C,MAAO,CAAA,EASb,MAAO,CAAA,CACT,CAGA,iBAAkB,CACZ,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,QAAQ,CAAC,MAC7B,IAAI,CAAC,MAAM,CAAG,MACJ,IAAI,CAAC,WAAW,IAC1B,CAAA,IAAI,CAAC,MAAM,CAAG,MADT,CAGT,CACF,G,U,C,E,O,C,C,ED3LM,EAAe,SAAS,aAAa,CAAC,eACtC,EAAc,SAAS,aAAa,CAAC,WACrC,EAAQ,SAAS,gBAAgB,CAAC,eAClC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAe,SAAS,aAAa,CAAC,kBAsC5C,SAAS,IAGP,AAFc,EAAK,QAAQ,GAAG,IAAI,GAE5B,OAAO,CAAC,CAAC,EAAO,KACpB,IAAM,EAAO,CAAK,CAAC,EAAM,AAEzB,CAAA,EAAK,WAAW,CAAG,GAAS,GAC5B,EAAK,SAAS,CAAG,CAAC,WAAW,EAAE,EAAQ,CAAC,YAAY,EAAE,EAAA,CAAO,CAAG,GAAA,CAAI,AACtE,GAEA,EAAa,WAAW,CAAG,EAAK,QAAQ,EAC1C,CA/CA,EAAY,gBAAgB,CAAC,QAAS,KAChC,AAAqB,SAArB,EAAK,SAAS,IAChB,EAAK,KAAK,GACV,EAAY,SAAS,CAAC,OAAO,CAAC,QAAS,WACvC,EAAY,WAAW,CAAG,YAE1B,EAAK,OAAO,GACZ,EAAY,SAAS,CAAC,OAAO,CAAC,UAAW,SACzC,EAAY,WAAW,CAAG,SAG5B,IA+CA,EAAW,SAAS,CAAC,GAAG,CAAC,UACzB,EAAY,SAAS,CAAC,GAAG,CAAC,UAC1B,EAAa,SAAS,CAAC,GAAG,CAAC,SA/C7B,GAEA,SAAS,gBAAgB,CAAC,UAAW,AAAC,IACpC,GAAI,AAAqB,YAArB,EAAK,SAAS,GAChB,OAGF,IAAM,EAAY,EAAE,QAAQ,CAEtB,EAAU,CACd,UAAW,IAAM,EAAK,QAAQ,GAC9B,WAAY,IAAM,EAAK,QAAQ,CAAC,QAAS,GACzC,QAAS,IAAM,EAAK,MAAM,GAC1B,UAAW,IAAM,EAAK,QAAQ,EAChC,CAEI,CAAA,CAAO,CAAC,EAAE,GAAG,CAAC,GAChB,CAAO,CAAC,EAAE,GAAG,CAAC,GACd,IAmBE,AAAqB,QAArB,EAAK,SAAS,GAChB,EAAW,SAAS,CAAC,MAAM,CAAC,UACE,SAArB,EAAK,SAAS,IACvB,EAAY,SAAS,CAAC,MAAM,CAAC,UAnBjC","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $a5fd07fa01589658$exports = {};\n'use strict';\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = null){\n        this.size = 4;\n        this.score = 0;\n        this.status = 'idle';\n        this.initialState = initialState;\n        this.board = initialState ? initialState.map((row)=>[\n                ...row\n            ]) : this.createEmptyBoard();\n        this.prevBoard = null;\n    }\n    createEmptyBoard() {\n        return Array.from({\n            length: this.size\n        }, ()=>Array(this.size).fill(0));\n    }\n    getState() {\n        return this.board;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        if (this.status !== 'idle') return;\n        this.status = 'playing';\n        this.addRandomNumber();\n        this.addRandomNumber();\n    }\n    restart() {\n        this.status = 'idle';\n        this.score = 0;\n        this.board = this.initialState ? this.initialState.map((row)=>[\n                ...row\n            ]) : this.createEmptyBoard();\n    }\n    // Moves\n    moveLeft() {\n        this.makeMove('left');\n    }\n    moveRight() {\n        this.makeMove('right');\n    }\n    moveUp() {\n        this.makeMove('up');\n    }\n    moveDown() {\n        this.makeMove('down');\n    }\n    // Implements the game move logic\n    makeMove(direction, stackOnly = false) {\n        if (this.status !== 'playing') return;\n        // Save the state of the board before changes to compare\n        this.prevBoard = JSON.stringify(this.board);\n        // Transposition for vertical moves (up/down)\n        if (direction === 'up' || direction === 'down') this.board = this.transpose(this.board);\n        // Reverse rows for moves to the right (right) and down (down)\n        if (direction === 'right' || direction === 'down') this.board = this.board.map((row)=>row.reverse());\n        // Perform only stack (then merge if stackOnly = false)\n        this.board = this.board.map((row)=>this.shiftRow(row));\n        if (!stackOnly) // Perform merge (cell merging)\n        this.board = this.board.map((row)=>this.mergeRow(row));\n        // Restore the board's appearance after temporary changes\n        if (direction === 'right' || direction === 'down') this.board = this.board.map((row)=>row.reverse());\n        if (direction === 'up' || direction === 'down') this.board = this.transpose(this.board);\n        // If the board has changed, add a new random number\n        if (this.prevBoard !== JSON.stringify(this.board)) {\n            this.addRandomNumber();\n            this.checkGameStatus();\n        }\n    }\n    // Shift a row to the left (remove all empty cells)\n    shiftRow(row) {\n        const filteredRow = row.filter((cell)=>cell !== 0);\n        return [\n            ...filteredRow,\n            ...Array(this.size - filteredRow.length).fill(0)\n        ];\n    }\n    stackRow(row) {\n        const filteredRow = row.filter((cell)=>cell !== 0);\n        return [\n            ...Array(this.size - filteredRow.length).fill(0),\n            ...filteredRow\n        ];\n    }\n    // Merge adjacent tiles in a row\n    mergeRow(row) {\n        for(let i = 0; i < row.length - 1; i++)if (row[i] !== 0 && row[i] === row[i + 1]) {\n            row[i] *= 2;\n            row[i + 1] = 0;\n            this.score += row[i];\n        }\n        return this.shiftRow(row); // Re-shift row after merging\n    }\n    // Add a random number (2 or 4) to the board\n    addRandomNumber() {\n        const emptyCells = [];\n        for(let i = 0; i < this.size; i++){\n            for(let j = 0; j < this.size; j++)if (this.board[i][j] === 0) emptyCells.push([\n                i,\n                j\n            ]);\n        }\n        if (emptyCells.length === 0) return;\n        const [x, y] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n    }\n    // Transpose a matrix (swap rows with columns)\n    transpose(board) {\n        return board[0].map((_, colIndex)=>// eslint-disable-next-line prettier/prettier\n            this.board.map((row)=>row[colIndex]));\n    }\n    // Check if a move is possible (any merges or empty cells)\n    canMakeMove() {\n        if (this.board.some((row)=>row.includes(0))) return true;\n        for(let i = 0; i < this.size; i++)for(let j = 0; j < this.size - 1; j++){\n            if (this.board[i][j] === this.board[i][j + 1]) return true;\n             // Horizontal\n            if (this.board[j][i] === this.board[j + 1][i]) return true;\n             // Vertical\n        }\n        return false;\n    }\n    // Check the game state (win or lose)\n    checkGameStatus() {\n        if (this.board.flat().includes(2048)) this.status = 'win';\n        else if (!this.canMakeMove()) this.status = 'lose';\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\n'use strict';\nconst $09e991522ca7e64e$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports)))();\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector('.game-score');\nconst $09e991522ca7e64e$var$startButton = document.querySelector('.button');\nconst $09e991522ca7e64e$var$cells = document.querySelectorAll('.field-cell');\nconst $09e991522ca7e64e$var$messageWin = document.querySelector('.message-win');\nconst $09e991522ca7e64e$var$messageLose = document.querySelector('.message-lose');\nconst $09e991522ca7e64e$var$messageStart = document.querySelector('.message-start');\n$09e991522ca7e64e$var$startButton.addEventListener('click', ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === 'idle') {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startButton.classList.replace('start', 'restart');\n        $09e991522ca7e64e$var$startButton.textContent = 'Restart';\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$startButton.classList.replace('restart', 'start');\n        $09e991522ca7e64e$var$startButton.textContent = 'Start';\n    }\n    $09e991522ca7e64e$var$updateBoard();\n    $09e991522ca7e64e$var$resetMessages();\n});\ndocument.addEventListener('keydown', (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== 'playing') return;\n    const stackOnly = e.shiftKey;\n    const actions = {\n        ArrowLeft: ()=>$09e991522ca7e64e$var$game.moveLeft(),\n        ArrowRight: ()=>$09e991522ca7e64e$var$game.makeMove('right', stackOnly),\n        ArrowUp: ()=>$09e991522ca7e64e$var$game.moveUp(),\n        ArrowDown: ()=>$09e991522ca7e64e$var$game.moveDown()\n    };\n    if (actions[e.key]) {\n        actions[e.key](); // Виконає спочатку stack, потім merge для ArrowRight\n        $09e991522ca7e64e$var$updateBoard();\n        $09e991522ca7e64e$var$checkMessages();\n    }\n});\nfunction $09e991522ca7e64e$var$updateBoard() {\n    const state = $09e991522ca7e64e$var$game.getState().flat();\n    state.forEach((value, index)=>{\n        const cell = $09e991522ca7e64e$var$cells[index];\n        cell.textContent = value || '';\n        cell.className = `field-cell ${value ? `field-cell--${value}` : ''}`;\n    });\n    $09e991522ca7e64e$var$scoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n}\nfunction $09e991522ca7e64e$var$checkMessages() {\n    if ($09e991522ca7e64e$var$game.getStatus() === 'win') $09e991522ca7e64e$var$messageWin.classList.remove('hidden');\n    else if ($09e991522ca7e64e$var$game.getStatus() === 'lose') $09e991522ca7e64e$var$messageLose.classList.remove('hidden');\n}\nfunction $09e991522ca7e64e$var$resetMessages() {\n    $09e991522ca7e64e$var$messageWin.classList.add('hidden');\n    $09e991522ca7e64e$var$messageLose.classList.add('hidden');\n    $09e991522ca7e64e$var$messageStart.classList.add('hidden');\n}\n\n\n//# sourceMappingURL=index.7fd8f17c.js.map\n","'use strict';\n\nimport Game from '../modules/Game.class.js';\n\nconst game = new Game();\n\nconst scoreElement = document.querySelector('.game-score');\nconst startButton = document.querySelector('.button');\nconst cells = document.querySelectorAll('.field-cell');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst messageStart = document.querySelector('.message-start');\n\nstartButton.addEventListener('click', () => {\n  if (game.getStatus() === 'idle') {\n    game.start();\n    startButton.classList.replace('start', 'restart');\n    startButton.textContent = 'Restart';\n  } else {\n    game.restart();\n    startButton.classList.replace('restart', 'start');\n    startButton.textContent = 'Start';\n  }\n\n  updateBoard();\n  resetMessages();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  const stackOnly = e.shiftKey;\n\n  const actions = {\n    ArrowLeft: () => game.moveLeft(),\n    ArrowRight: () => game.makeMove('right', stackOnly),\n    ArrowUp: () => game.moveUp(),\n    ArrowDown: () => game.moveDown(),\n  };\n\n  if (actions[e.key]) {\n    actions[e.key](); // Виконає спочатку stack, потім merge для ArrowRight\n    updateBoard();\n    checkMessages();\n  }\n});\n\nfunction updateBoard() {\n  const state = game.getState().flat();\n\n  state.forEach((value, index) => {\n    const cell = cells[index];\n\n    cell.textContent = value || '';\n    cell.className = `field-cell ${value ? `field-cell--${value}` : ''}`;\n  });\n\n  scoreElement.textContent = game.getScore();\n}\n\nfunction checkMessages() {\n  if (game.getStatus() === 'win') {\n    messageWin.classList.remove('hidden');\n  } else if (game.getStatus() === 'lose') {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nfunction resetMessages() {\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageStart.classList.add('hidden');\n}\n","'use strict';\n\nclass Game {\n  constructor(initialState = null) {\n    this.size = 4;\n    this.score = 0;\n    this.status = 'idle';\n    this.initialState = initialState;\n\n    this.board = initialState\n      ? initialState.map((row) => [...row])\n      : this.createEmptyBoard();\n    this.prevBoard = null;\n  }\n\n  createEmptyBoard() {\n    return Array.from({ length: this.size }, () => Array(this.size).fill(0));\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    if (this.status !== 'idle') {\n      return;\n    }\n\n    this.status = 'playing';\n    this.addRandomNumber();\n    this.addRandomNumber();\n  }\n\n  restart() {\n    this.status = 'idle';\n    this.score = 0;\n\n    this.board = this.initialState\n      ? this.initialState.map((row) => [...row])\n      : this.createEmptyBoard();\n  }\n\n  // Moves\n  moveLeft() {\n    this.makeMove('left');\n  }\n\n  moveRight() {\n    this.makeMove('right');\n  }\n\n  moveUp() {\n    this.makeMove('up');\n  }\n\n  moveDown() {\n    this.makeMove('down');\n  }\n\n  // Implements the game move logic\n  makeMove(direction, stackOnly = false) {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    // Save the state of the board before changes to compare\n    this.prevBoard = JSON.stringify(this.board);\n\n    // Transposition for vertical moves (up/down)\n    if (direction === 'up' || direction === 'down') {\n      this.board = this.transpose(this.board);\n    }\n\n    // Reverse rows for moves to the right (right) and down (down)\n    if (direction === 'right' || direction === 'down') {\n      this.board = this.board.map((row) => row.reverse());\n    }\n\n    // Perform only stack (then merge if stackOnly = false)\n    this.board = this.board.map((row) => this.shiftRow(row));\n\n    if (!stackOnly) {\n      // Perform merge (cell merging)\n      this.board = this.board.map((row) => this.mergeRow(row));\n    }\n\n    // Restore the board's appearance after temporary changes\n    if (direction === 'right' || direction === 'down') {\n      this.board = this.board.map((row) => row.reverse());\n    }\n\n    if (direction === 'up' || direction === 'down') {\n      this.board = this.transpose(this.board);\n    }\n\n    // If the board has changed, add a new random number\n    if (this.prevBoard !== JSON.stringify(this.board)) {\n      this.addRandomNumber();\n      this.checkGameStatus();\n    }\n  }\n\n  // Shift a row to the left (remove all empty cells)\n  shiftRow(row) {\n    const filteredRow = row.filter((cell) => cell !== 0);\n\n    return [...filteredRow, ...Array(this.size - filteredRow.length).fill(0)];\n  }\n\n  stackRow(row) {\n    const filteredRow = row.filter((cell) => cell !== 0);\n\n    return [...Array(this.size - filteredRow.length).fill(0), ...filteredRow];\n  }\n\n  // Merge adjacent tiles in a row\n  mergeRow(row) {\n    for (let i = 0; i < row.length - 1; i++) {\n      if (row[i] !== 0 && row[i] === row[i + 1]) {\n        row[i] *= 2;\n        row[i + 1] = 0;\n        this.score += row[i];\n      }\n    }\n\n    return this.shiftRow(row); // Re-shift row after merging\n  }\n\n  // Add a random number (2 or 4) to the board\n  addRandomNumber() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const [x, y] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  // Transpose a matrix (swap rows with columns)\n  transpose(board) {\n    return board[0].map((_, colIndex) =>\n      // eslint-disable-next-line prettier/prettier\n      this.board.map((row) => row[colIndex]));\n  }\n\n  // Check if a move is possible (any merges or empty cells)\n  canMakeMove() {\n    if (this.board.some((row) => row.includes(0))) {\n      return true;\n    }\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size - 1; j++) {\n        if (this.board[i][j] === this.board[i][j + 1]) {\n          return true;\n        } // Horizontal\n\n        if (this.board[j][i] === this.board[j + 1][i]) {\n          return true;\n        } // Vertical\n      }\n    }\n\n    return false;\n  }\n\n  // Check the game state (win or lose)\n  checkGameStatus() {\n    if (this.board.flat().includes(2048)) {\n      this.status = 'win';\n    } else if (!this.canMakeMove()) {\n      this.status = 'lose';\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["a","$a5fd07fa01589658$exports","$09e991522ca7e64e$var$game","constructor","initialState","size","score","status","board","map","row","createEmptyBoard","prevBoard","Array","from","length","fill","getState","getScore","getStatus","start","addRandomNumber","restart","moveLeft","makeMove","moveRight","moveUp","moveDown","direction","stackOnly","JSON","stringify","transpose","reverse","shiftRow","mergeRow","checkGameStatus","filteredRow","filter","cell","stackRow","i","emptyCells","j","push","x","y","Math","floor","random","_","colIndex","canMakeMove","some","includes","flat","__esModule","default","$09e991522ca7e64e$var$scoreElement","document","querySelector","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$cells","querySelectorAll","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$updateBoard","state","forEach","value","index","textContent","className","addEventListener","classList","replace","add","e","shiftKey","actions","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","key","remove"],"version":3,"file":"index.7fd8f17c.js.map"}