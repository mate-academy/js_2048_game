{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$var$IDLE = \"idle\";\nvar $3d28d7f1aac198f5$var$PLAYING = \"playing\";\nvar $3d28d7f1aac198f5$export$eb2b832b8b9fda85 = \"win\";\nvar $3d28d7f1aac198f5$export$43a03cf66b318012 = \"lose\";\nvar $3d28d7f1aac198f5$export$985739bfa5723e08 = /*#__PURE__*/ function() {\n    function Game(initialState, winCallback, loseCallback) {\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.board = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = $3d28d7f1aac198f5$var$IDLE;\n        this.isStarted = false;\n        this.winCallback = winCallback;\n        this.loseCallback = loseCallback;\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveTile\",\n            value: function moveTile(fromCell, toCell) {\n                var fromCellRect = fromCell.getBoundingClientRect();\n                var toCellRect = toCell.getBoundingClientRect();\n                var xOffset = toCellRect.left - fromCellRect.left;\n                var yOffset = toCellRect.top - fromCellRect.top;\n                fromCell.style.setProperty(\"--x-offset\", \"\".concat(xOffset, \"px\"));\n                fromCell.style.setProperty(\"--y-offset\", \"\".concat(yOffset, \"px\"));\n                fromCell.classList.add(\"moving\");\n            }\n        },\n        {\n            key: \"updateBoard\",\n            value: function updateBoard() {\n                var cells = document.querySelectorAll(\".field-cell\");\n                var cellIndex = 0;\n                for(var row = 0; row < this.board.length; row++)for(var col = 0; col < this.board[row].length; col++){\n                    var cell = cells[cellIndex++];\n                    var value = this.board[row][col];\n                    var previousValue = cell.textContent;\n                    cell.classList.remove(\"field-cell--\".concat(previousValue));\n                    if (value === 0) cell.textContent = \"\";\n                    else {\n                        cell.classList.add(\"field-cell--\".concat(value));\n                        cell.textContent = value;\n                    }\n                }\n            }\n        },\n        {\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                for(var row = 0; row < 4; row++){\n                    for(var col = 0; col < 4; col++)if (this.board[row][col] === 0) emptyCells.push({\n                        row: row,\n                        col: col\n                    });\n                }\n                if (emptyCells.length > 0) {\n                    var _emptyCells_Math_floor = emptyCells[Math.floor(Math.random() * emptyCells.length)], row1 = _emptyCells_Math_floor.row, col1 = _emptyCells_Math_floor.col;\n                    if (this.score === 0) this.board[row1][col1] = 2;\n                    this.updateBoard();\n                }\n            }\n        },\n        {\n            key: \"addRandomCellAfterMoving\",\n            value: function addRandomCellAfterMoving() {\n                var emptyCells = [];\n                for(var row = 0; row < 4; row++){\n                    for(var col = 0; col < 4; col++)if (this.board[row][col] === 0) emptyCells.push({\n                        row: row,\n                        col: col\n                    });\n                }\n                if (emptyCells.length > 0) {\n                    var _emptyCells_Math_floor = emptyCells[Math.floor(Math.random() * emptyCells.length)], row1 = _emptyCells_Math_floor.row, col1 = _emptyCells_Math_floor.col;\n                    this.board[row1][col1] = Math.random() < 0.9 ? 2 : 4;\n                    this.updateBoard();\n                }\n            }\n        },\n        {\n            key: \"createColumn\",\n            value: function createColumn(col) {\n                var newColumn = [];\n                for(var row = 0; row < this.board.length; row++)if (this.board[row][col] !== 0) newColumn.push(this.board[row][col]);\n                return newColumn;\n            }\n        },\n        {\n            key: \"updateColumn\",\n            value: function updateColumn(col, newColumn) {\n                var moved = false;\n                for(var row = 0; row < this.board.length; row++)if (this.board[row][col] !== newColumn[row]) {\n                    this.board[row][col] = newColumn[row];\n                    moved = true;\n                }\n                return moved;\n            }\n        },\n        {\n            key: \"resetGameStart\",\n            value: function resetGameStart() {\n                this.score = 0;\n                this.status = $3d28d7f1aac198f5$var$PLAYING;\n                this.board = [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n                this.addRandomTile();\n                this.addRandomTile();\n            }\n        },\n        {\n            key: \"mergeTitles\",\n            value: function mergeTitles(newRow, canMerge) {\n                var mergedThisMove = [];\n                for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                    newRow[i] *= 2;\n                    newRow.splice(i + 1, 1);\n                    canMerge[i] = false;\n                    mergedThisMove.push(i);\n                }\n                return mergedThisMove;\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this, _loop = function(row) {\n                    var currentRow = _this.board[row].filter(function(val) {\n                        return val !== 0;\n                    });\n                    var mergedRow = [];\n                    var skip = false;\n                    for(var i = 0; i < currentRow.length; i++){\n                        if (skip) {\n                            skip = false;\n                            continue;\n                        }\n                        if (currentRow[i] === currentRow[i + 1]) {\n                            mergedRow.push(currentRow[i] * 2);\n                            _this.getScore(true, currentRow[i] * 2);\n                            skip = true;\n                            moved = true;\n                        } else mergedRow.push(currentRow[i]);\n                    }\n                    while(mergedRow.length < _this.board[row].length)mergedRow.push(0);\n                    if (!moved) {\n                        for(var i1 = 0; i1 < _this.board[row].length; i1++)if (_this.board[row][i1] !== mergedRow[i1]) {\n                            moved = true;\n                            break;\n                        }\n                    }\n                    _this.board[row] = mergedRow;\n                };\n                var moved = false;\n                for(var row = 0; row < this.board.length; row++)_loop(row);\n                if (moved) {\n                    this.addRandomCellAfterMoving();\n                    this.updateBoard();\n                    this.getStatus();\n                }\n                return moved;\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this, _loop = function(row) {\n                    var currentRow = _this.board[row].filter(function(val) {\n                        return val !== 0;\n                    });\n                    var mergedRow = [];\n                    var skip = false;\n                    for(var i = 0; i < currentRow.length; i++){\n                        if (skip) {\n                            skip = false;\n                            continue;\n                        }\n                        if (currentRow[i] === currentRow[i + 1]) {\n                            mergedRow.push(currentRow[i] * 2);\n                            _this.getScore(true, currentRow[i] * 2);\n                            skip = true;\n                            moved = true;\n                        } else mergedRow.push(currentRow[i]);\n                    }\n                    while(mergedRow.length < _this.board[row].length)mergedRow.unshift(0);\n                    for(var i1 = 0; i1 < _this.board[row].length; i1++)if (_this.board[row][i1] !== mergedRow[i1]) {\n                        moved = true;\n                        break;\n                    }\n                    _this.board[row] = mergedRow;\n                };\n                var moved = false;\n                for(var row = 0; row < this.board.length; row++)_loop(row);\n                if (moved) {\n                    this.addRandomCellAfterMoving();\n                    this.updateBoard();\n                    this.getStatus();\n                }\n                return moved;\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var moved = false;\n                for(var col = 0; col < this.board.length; col++){\n                    var newColumn = this.createColumn(col);\n                    var canMerge = new Array(newColumn.length).fill(true);\n                    for(var i = 0; i < newColumn.length - 1; i++)if (newColumn[i] === newColumn[i + 1] && canMerge[i] && canMerge[i + 1]) {\n                        newColumn[i] *= 2;\n                        newColumn.splice(i + 1, 1);\n                        moved = true;\n                        canMerge[i] = false;\n                        this.getScore(moved, newColumn[i]);\n                    }\n                    while(newColumn.length < this.board.length)newColumn.push(0);\n                    moved = this.updateColumn(col, newColumn) || moved;\n                }\n                if (moved) {\n                    this.addRandomCellAfterMoving();\n                    this.updateBoard();\n                    this.getStatus();\n                }\n                return moved;\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var moved = false;\n                for(var col = 0; col < this.board.length; col++){\n                    var newColumn = this.createColumn(col);\n                    var canMerge = new Array(newColumn.length).fill(true);\n                    for(var i = newColumn.length - 1; i > 0; i--)if (newColumn[i] === newColumn[i - 1] && canMerge[i] && canMerge[i - 1]) {\n                        newColumn[i] *= 2;\n                        newColumn.splice(i - 1, 1);\n                        moved = true;\n                        canMerge[i] = false;\n                        this.getScore(moved, newColumn[i]);\n                    }\n                    while(newColumn.length < this.board.length)newColumn.unshift(0);\n                    moved = this.updateColumn(col, newColumn) || moved;\n                }\n                if (moved) {\n                    this.addRandomCellAfterMoving();\n                    this.updateBoard();\n                    this.getStatus();\n                }\n                return moved;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                if (this.score === 0) this.status = $3d28d7f1aac198f5$var$IDLE;\n                else {\n                    var hasEmptyCell = false;\n                    var has2048Cell = false;\n                    var canMove = false;\n                    for(var row = 0; row < this.board.length; row++)for(var col = 0; col < this.board[row].length; col++){\n                        if (this.board[row][col] === 0) hasEmptyCell = true;\n                        if (this.board[row][col] === 2048) has2048Cell = true;\n                        if (row < this.board.length - 1 && this.board[row][col] === this.board[row + 1][col]) canMove = true;\n                        if (col < this.board[row].length - 1 && this.board[row][col] === this.board[row][col + 1]) canMove = true;\n                    }\n                    if (has2048Cell) {\n                        this.status = $3d28d7f1aac198f5$export$eb2b832b8b9fda85;\n                        this.winCallback();\n                    } else if (hasEmptyCell || canMove) this.status = $3d28d7f1aac198f5$var$PLAYING;\n                    else {\n                        this.status = $3d28d7f1aac198f5$export$43a03cf66b318012;\n                        this.loseCallback();\n                    }\n                }\n                return this.status;\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                this.resetGameStart();\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.resetGameStart();\n            }\n        }\n    ]);\n    return Game;\n}();\n\n\n\"use strict\";\nvar $197cd56b15c33885$var$game = new (0, $3d28d7f1aac198f5$export$985739bfa5723e08)(null, $197cd56b15c33885$var$showWinMessage, $197cd56b15c33885$var$showLoseMessage);\nvar $197cd56b15c33885$var$startButton = document.querySelector(\".start\");\nvar $197cd56b15c33885$var$cells = document.querySelectorAll(\".field-cell\");\nvar $197cd56b15c33885$var$score = document.querySelector(\".game-score\");\nvar $197cd56b15c33885$var$recordElement = document.querySelector(\".best__score\");\nvar $197cd56b15c33885$var$messageStart = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$messageWin = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$messageLose = document.querySelector(\".message-lose\");\nfunction $197cd56b15c33885$var$showWinMessage() {\n    $197cd56b15c33885$var$messageWin.classList.remove(\"hidden\");\n}\nfunction $197cd56b15c33885$var$showLoseMessage() {\n    $197cd56b15c33885$var$messageLose.classList.remove(\"hidden\");\n}\nfunction $197cd56b15c33885$var$hideMessageStart() {\n    $197cd56b15c33885$var$messageStart.classList.add(\"hidden\");\n}\nfunction $197cd56b15c33885$var$hideMessageLose() {\n    $197cd56b15c33885$var$messageLose.classList.add(\"hidden\");\n}\nfunction $197cd56b15c33885$var$hideMessageWin() {\n    $197cd56b15c33885$var$messageWin.classList.add(\"hidden\");\n}\nfunction $197cd56b15c33885$var$updateScore(value) {\n    $197cd56b15c33885$var$score.textContent = value;\n}\nfunction $197cd56b15c33885$var$saveScore(sscore) {\n    var currentRecord = localStorage.getItem(\"highScore\");\n    if (!currentRecord || sscore > currentRecord) {\n        localStorage.setItem(\"highScore\", sscore);\n        $197cd56b15c33885$var$displayRecord();\n    }\n}\nfunction $197cd56b15c33885$var$displayRecord() {\n    var highScore = localStorage.getItem(\"highScore\") || 0;\n    $197cd56b15c33885$var$recordElement.textContent = highScore;\n}\n$197cd56b15c33885$var$displayRecord();\n$197cd56b15c33885$var$game.getScore = function(moved, value) {\n    if (moved && value > 0) {\n        this.score += value;\n        $197cd56b15c33885$var$updateScore(this.score);\n        $197cd56b15c33885$var$saveScore(this.score);\n    }\n};\n$197cd56b15c33885$var$startButton.addEventListener(\"click\", function() {\n    $197cd56b15c33885$var$startButton.textContent = \"Restart\";\n    $197cd56b15c33885$var$startButton.classList.remove(\"start\");\n    $197cd56b15c33885$var$startButton.classList.add(\"restart\");\n    $197cd56b15c33885$var$score.textContent = \"0\";\n    $197cd56b15c33885$var$cells.forEach(function(cell) {\n        cell.classList.remove(\"hidden\");\n    });\n    if ($197cd56b15c33885$var$game.status === (0, $3d28d7f1aac198f5$export$eb2b832b8b9fda85) || $197cd56b15c33885$var$game.status === (0, $3d28d7f1aac198f5$export$43a03cf66b318012)) {\n        $197cd56b15c33885$var$hideMessageWin();\n        $197cd56b15c33885$var$hideMessageLose();\n    }\n    $197cd56b15c33885$var$game.start();\n    $197cd56b15c33885$var$hideMessageStart();\n    $197cd56b15c33885$var$hideMessageLose();\n    $197cd56b15c33885$var$hideMessageWin();\n    $197cd56b15c33885$var$displayRecord();\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    switch(e.key){\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n    }\n});\n\n})();\n//# sourceMappingURL=index.0d5498be.js.map\n","'use strict';\n\nimport { WIN, LOSE, Game } from '../modules/Game.class';\n\nconst game = new Game(null, showWinMessage, showLoseMessage);\n\nconst startButton = document.querySelector('.start');\nconst cells = document.querySelectorAll('.field-cell');\nconst score = document.querySelector('.game-score');\nconst recordElement = document.querySelector('.best__score');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nfunction showWinMessage() {\n  messageWin.classList.remove('hidden');\n}\n\nfunction showLoseMessage() {\n  messageLose.classList.remove('hidden');\n}\n\nfunction hideMessageStart() {\n  messageStart.classList.add('hidden');\n}\n\nfunction hideMessageLose() {\n  messageLose.classList.add('hidden');\n}\n\nfunction hideMessageWin() {\n  messageWin.classList.add('hidden');\n}\n\nfunction updateScore(value) {\n  score.textContent = value;\n}\n\nfunction saveScore(sscore) {\n  const currentRecord = localStorage.getItem('highScore');\n\n  if (!currentRecord || sscore > currentRecord) {\n    localStorage.setItem('highScore', sscore);\n    displayRecord();\n  }\n}\n\nfunction displayRecord() {\n  const highScore = localStorage.getItem('highScore') || 0;\n\n  recordElement.textContent = highScore;\n}\n\ndisplayRecord();\n\ngame.getScore = function (moved, value) {\n  if (moved && value > 0) {\n    this.score += value;\n    updateScore(this.score);\n    saveScore(this.score);\n  }\n};\n\nstartButton.addEventListener('click', () => {\n  startButton.textContent = 'Restart';\n  startButton.classList.remove('start');\n  startButton.classList.add('restart');\n  score.textContent = '0';\n\n  cells.forEach((cell) => {\n    cell.classList.remove('hidden');\n  });\n\n  if (game.status === WIN || game.status === LOSE) {\n    hideMessageWin();\n    hideMessageLose();\n  }\n\n  game.start();\n  hideMessageStart();\n  hideMessageLose();\n  hideMessageWin();\n  displayRecord();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n});\n","'use strict';\n\nconst IDLE = 'idle';\nconst PLAYING = 'playing';\n\nexport const WIN = 'win';\nexport const LOSE = 'lose';\n\nexport class Game {\n  constructor(initialState, winCallback, loseCallback) {\n    this.board = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.score = 0;\n\n    this.status = IDLE;\n    this.isStarted = false;\n    this.winCallback = winCallback;\n    this.loseCallback = loseCallback;\n  }\n\n  moveTile(fromCell, toCell) {\n    const fromCellRect = fromCell.getBoundingClientRect();\n    const toCellRect = toCell.getBoundingClientRect();\n\n    const xOffset = toCellRect.left - fromCellRect.left;\n    const yOffset = toCellRect.top - fromCellRect.top;\n\n    fromCell.style.setProperty('--x-offset', `${xOffset}px`);\n    fromCell.style.setProperty('--y-offset', `${yOffset}px`);\n\n    fromCell.classList.add('moving');\n  }\n\n  updateBoard() {\n    const cells = document.querySelectorAll('.field-cell');\n\n    let cellIndex = 0;\n\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        const cell = cells[cellIndex++];\n        const value = this.board[row][col];\n        const previousValue = cell.textContent;\n\n        cell.classList.remove(`field-cell--${previousValue}`);\n\n        if (value === 0) {\n          cell.textContent = '';\n        } else {\n          cell.classList.add(`field-cell--${value}`);\n          cell.textContent = value;\n        }\n      }\n    }\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const { row, col } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      if (this.score === 0) {\n        this.board[row][col] = 2;\n      }\n      this.updateBoard();\n    }\n  }\n\n  addRandomCellAfterMoving() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const { row, col } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n      this.updateBoard();\n    }\n  }\n\n  createColumn(col) {\n    const newColumn = [];\n\n    for (let row = 0; row < this.board.length; row++) {\n      if (this.board[row][col] !== 0) {\n        newColumn.push(this.board[row][col]);\n      }\n    }\n\n    return newColumn;\n  }\n\n  updateColumn(col, newColumn) {\n    let moved = false;\n\n    for (let row = 0; row < this.board.length; row++) {\n      if (this.board[row][col] !== newColumn[row]) {\n        this.board[row][col] = newColumn[row];\n        moved = true;\n      }\n    }\n\n    return moved;\n  }\n\n  resetGameStart() {\n    this.score = 0;\n    this.status = PLAYING;\n\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  mergeTitles(newRow, canMerge) {\n    const mergedThisMove = [];\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        newRow.splice(i + 1, 1);\n        canMerge[i] = false;\n        mergedThisMove.push(i);\n      }\n    }\n\n    return mergedThisMove;\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    for (let row = 0; row < this.board.length; row++) {\n      const currentRow = this.board[row].filter((val) => val !== 0);\n      const mergedRow = [];\n\n      let skip = false;\n\n      for (let i = 0; i < currentRow.length; i++) {\n        if (skip) {\n          skip = false;\n          continue;\n        }\n\n        if (currentRow[i] === currentRow[i + 1]) {\n          mergedRow.push(currentRow[i] * 2);\n          this.getScore(true, currentRow[i] * 2);\n          skip = true;\n          moved = true;\n        } else {\n          mergedRow.push(currentRow[i]);\n        }\n      }\n\n      while (mergedRow.length < this.board[row].length) {\n        mergedRow.push(0);\n      }\n\n      if (!moved) {\n        for (let i = 0; i < this.board[row].length; i++) {\n          if (this.board[row][i] !== mergedRow[i]) {\n            moved = true;\n            break;\n          }\n        }\n      }\n\n      this.board[row] = mergedRow;\n    }\n\n    if (moved) {\n      this.addRandomCellAfterMoving();\n      this.updateBoard();\n      this.getStatus();\n    }\n\n    return moved;\n  }\n\n  moveRight() {\n    let moved = false;\n\n    for (let row = 0; row < this.board.length; row++) {\n      const currentRow = this.board[row].filter((val) => val !== 0);\n\n      const mergedRow = [];\n      let skip = false;\n\n      for (let i = 0; i < currentRow.length; i++) {\n        if (skip) {\n          skip = false;\n          continue;\n        }\n\n        if (currentRow[i] === currentRow[i + 1]) {\n          mergedRow.push(currentRow[i] * 2);\n          this.getScore(true, currentRow[i] * 2);\n          skip = true;\n          moved = true;\n        } else {\n          mergedRow.push(currentRow[i]);\n        }\n      }\n\n      while (mergedRow.length < this.board[row].length) {\n        mergedRow.unshift(0);\n      }\n\n      for (let i = 0; i < this.board[row].length; i++) {\n        if (this.board[row][i] !== mergedRow[i]) {\n          moved = true;\n          break;\n        }\n      }\n\n      this.board[row] = mergedRow;\n    }\n\n    if (moved) {\n      this.addRandomCellAfterMoving();\n      this.updateBoard();\n      this.getStatus();\n    }\n\n    return moved;\n  }\n\n  moveUp() {\n    let moved = false;\n\n    for (let col = 0; col < this.board.length; col++) {\n      const newColumn = this.createColumn(col);\n      const canMerge = new Array(newColumn.length).fill(true);\n\n      for (let i = 0; i < newColumn.length - 1; i++) {\n        if (\n          newColumn[i] === newColumn[i + 1] &&\n          canMerge[i] &&\n          canMerge[i + 1]\n        ) {\n          newColumn[i] *= 2;\n          newColumn.splice(i + 1, 1);\n          moved = true;\n          canMerge[i] = false;\n          this.getScore(moved, newColumn[i]);\n        }\n      }\n\n      while (newColumn.length < this.board.length) {\n        newColumn.push(0);\n      }\n\n      moved = this.updateColumn(col, newColumn) || moved;\n    }\n\n    if (moved) {\n      this.addRandomCellAfterMoving();\n      this.updateBoard();\n      this.getStatus();\n    }\n\n    return moved;\n  }\n\n  moveDown() {\n    let moved = false;\n\n    for (let col = 0; col < this.board.length; col++) {\n      const newColumn = this.createColumn(col);\n      const canMerge = new Array(newColumn.length).fill(true);\n\n      for (let i = newColumn.length - 1; i > 0; i--) {\n        if (\n          newColumn[i] === newColumn[i - 1] &&\n          canMerge[i] &&\n          canMerge[i - 1]\n        ) {\n          newColumn[i] *= 2;\n          newColumn.splice(i - 1, 1);\n          moved = true;\n          canMerge[i] = false;\n          this.getScore(moved, newColumn[i]);\n        }\n      }\n\n      while (newColumn.length < this.board.length) {\n        newColumn.unshift(0);\n      }\n\n      moved = this.updateColumn(col, newColumn) || moved;\n    }\n\n    if (moved) {\n      this.addRandomCellAfterMoving();\n      this.updateBoard();\n      this.getStatus();\n    }\n\n    return moved;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    if (this.score === 0) {\n      this.status = IDLE;\n    } else {\n      let hasEmptyCell = false;\n      let has2048Cell = false;\n      let canMove = false;\n\n      for (let row = 0; row < this.board.length; row++) {\n        for (let col = 0; col < this.board[row].length; col++) {\n          if (this.board[row][col] === 0) {\n            hasEmptyCell = true;\n          }\n\n          if (this.board[row][col] === 2048) {\n            has2048Cell = true;\n          }\n\n          if (\n            row < this.board.length - 1 &&\n            this.board[row][col] === this.board[row + 1][col]\n          ) {\n            canMove = true;\n          }\n\n          if (\n            col < this.board[row].length - 1 &&\n            this.board[row][col] === this.board[row][col + 1]\n          ) {\n            canMove = true;\n          }\n        }\n      }\n\n      if (has2048Cell) {\n        this.status = WIN;\n        this.winCallback();\n      } else if (hasEmptyCell || canMove) {\n        this.status = PLAYING;\n      } else {\n        this.status = LOSE;\n        this.loseCallback();\n      }\n    }\n\n    return this.status;\n  }\n\n  start() {\n    this.resetGameStart();\n  }\n\n  restart() {\n    this.resetGameStart();\n  }\n}\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["$3d28d7f1aac198f5$var$IDLE","$3d28d7f1aac198f5$var$PLAYING","$3d28d7f1aac198f5$export$43a03cf66b318012","$197cd56b15c33885$var$game","protoProps","Game","initialState","winCallback","loseCallback","instance","Constructor","TypeError","board","score","status","isStarted","key","value","fromCell","toCell","fromCellRect","getBoundingClientRect","toCellRect","xOffset","left","yOffset","top","style","setProperty","concat","classList","add","cells","document","querySelectorAll","cellIndex","row","length","col","cell","previousValue","textContent","remove","emptyCells","push","_emptyCells_Math_floor","Math","floor","random","row1","col1","updateBoard","newColumn","moved","addRandomTile","newRow","canMerge","mergedThisMove","i","splice","_this","_loop","currentRow","filter","val","mergedRow","skip","getScore","i1","addRandomCellAfterMoving","getStatus","unshift","createColumn","Array","fill","updateColumn","hasEmptyCell","has2048Cell","canMove","resetGameStart","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","prototype","$197cd56b15c33885$var$messageWin","$197cd56b15c33885$var$messageLose","$197cd56b15c33885$var$startButton","querySelector","$197cd56b15c33885$var$cells","$197cd56b15c33885$var$score","$197cd56b15c33885$var$recordElement","$197cd56b15c33885$var$messageStart","$197cd56b15c33885$var$hideMessageLose","$197cd56b15c33885$var$hideMessageWin","$197cd56b15c33885$var$displayRecord","highScore","localStorage","getItem","sscore","currentRecord","setItem","addEventListener","forEach","start","e","moveLeft","moveRight","moveUp","moveDown"],"version":3,"file":"index.0d5498be.js.map"}