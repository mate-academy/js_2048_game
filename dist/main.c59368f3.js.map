{"version":3,"sources":["scripts/main.js"],"names":["ARROW_UP","ARROW_DOWN","ARROW_RIGHT","ARROW_LEFT","game","document","querySelector","score","buttonStart","messageStart","winner","scoreCount","movePass","cells","EMPTY_MATRIX","matrix","getVelue","Math","random","setDataToTable","data","i","length","j","innerHTML","innerText","cellsGroup","push","x","y","isEmpty","setRandomCell","getRandomEmptyCell","map","tile","maxCell","row","max","apply","classList","remove","handleInput","events","key","moveUp","moveDown","moveRigth","moveLeft","groupCellsColum","reduce","acumCels","cell","groupCellsRow","sliderTile","colum","reverse","groupCell","forEach","element","sliderCellsInGroup","emptyCells","filter","floor","group","cellWithVelue","targetCell","isEmptyForMerg","prevValue","replacementIsEmptyValue","addEventListener","e","add","contains","replace"],"mappings":"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","file":"main.c59368f3.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst ARROW_UP = 'ArrowUp';\nconst ARROW_DOWN = 'ArrowDown';\nconst ARROW_RIGHT = 'ArrowRight';\nconst ARROW_LEFT = 'ArrowLeft';\n\nconst game = document.querySelector('.game-field');\nconst score = document.querySelector('.game-score');\nconst buttonStart = document.querySelector('.start');\nconst messageStart = document.querySelector('.message-start');\nconst winner = document.querySelector('.message-win');\nlet scoreCount = 0;\nlet movePass = false;\nlet cells = [];\nconst EMPTY_MATRIX = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nlet matrix = EMPTY_MATRIX;\n\nbuttonStart.addEventListener('click', (e) => {\n  messageStart.classList.add('hidden');\n  movePass = true;\n\n  if (buttonStart.classList.contains('start')) {\n    buttonStart.classList.replace('start', 'restart');\n    buttonStart.innerText = 'Restart';\n\n    setRandomCell();\n    setRandomCell();\n  } else {\n    buttonStart.classList.replace('restart', 'start');\n    winner.classList.add('hidden');\n    buttonStart.innerText = 'Start';\n    scoreCount = 0;\n    movePass = false;\n    cells = [];\n    cellsGroup();\n\n    matrix = EMPTY_MATRIX;\n  }\n\n  if (movePass) {\n    document.addEventListener('keydown', handleInput);\n  }\n\n  setDataToTable();\n});\n\nfunction getVelue() {\n  return Math.random() > 0.8 ? 4 : 2;\n}\n\nfunction setDataToTable() {\n  let data = '<tbody>';\n\n  for (let i = 0; i < matrix.length; i++) {\n    data += `<tr class=\"field-row\">`;\n\n    for (let j = 0; j < matrix[i].length; j++) {\n      data += `<td class=\"field-cell\n      field-cell--${matrix[i][j]}\">${matrix[i][j] || ''}</td>`;\n    }\n    data += '</tr>';\n  }\n\n  data += '</tbody>';\n  game.innerHTML = data;\n  score.innerText = scoreCount;\n}\n\nfunction cellsGroup() {\n  for (let i = 0; i < matrix.length; i++) {\n    for (let j = 0; j < matrix[i].length; j++) {\n      cells.push({\n        x: i,\n        y: j,\n        isEmpty: true,\n      });\n    }\n  }\n}\n\ncellsGroup();\n\nfunction setRandomCell() {\n  const { x, y } = getRandomEmptyCell();\n\n  cells = cells.map(tile => {\n    if (tile.x === x && tile.y === y) {\n      return ({\n        ...tile,\n        isEmpty: false,\n      });\n    }\n\n    return tile;\n  });\n\n  matrix[x][y] = getVelue();\n\n  const maxCell = matrix\n    .map(function(row) {\n      return Math.max.apply(Math, row);\n    });\n\n  const maxCellValue = Math.max.apply(null, maxCell);\n\n  if (maxCellValue >= 2048) {\n    winner.classList.remove('hidden');\n  }\n}\n\nfunction handleInput(events) {\n  if (movePass) {\n    switch (events.key) {\n      case ARROW_UP:\n        moveUp();\n        break;\n\n      case ARROW_DOWN:\n        moveDown();\n        break;\n\n      case ARROW_RIGHT:\n        moveRigth();\n        break;\n\n      case ARROW_LEFT:\n        moveLeft();\n        break;\n    }\n\n    setRandomCell();\n    setDataToTable();\n  }\n}\n\nfunction groupCellsColum() {\n  return cells.reduce((acumCels, cell) => {\n    acumCels[cell.y] = acumCels[cell.y] || [];\n    acumCels[cell.y][cell.x] = cell;\n\n    return acumCels;\n  }, []);\n}\n\nfunction groupCellsRow() {\n  return cells.reduce((acumCels, cell) => {\n    acumCels[cell.x] = acumCels[cell.x] || [];\n    acumCels[cell.x][cell.y] = cell;\n\n    return acumCels;\n  }, []);\n}\n\nfunction moveUp() {\n  const groupCells = groupCellsColum();\n\n  sliderTile(groupCells);\n}\n\nfunction moveDown() {\n  const groupCells = groupCellsColum();\n\n  const groupCellsColumReverse = groupCells\n    .map(colum => [...colum].reverse());\n\n  sliderTile(groupCellsColumReverse);\n}\n\nfunction moveLeft() {\n  const groupCells = groupCellsRow();\n\n  sliderTile(groupCells);\n}\n\nfunction moveRigth() {\n  const groupCells = groupCellsRow();\n\n  const groupCellsRowReverse = groupCells\n    .map(row => [...row].reverse());\n\n  sliderTile(groupCellsRowReverse);\n}\n\nfunction sliderTile(groupCell) {\n  groupCell.forEach(element => sliderCellsInGroup(element));\n}\n\nfunction getRandomEmptyCell() {\n  const emptyCells = cells.filter(({ isEmpty }) => isEmpty);\n\n  if (emptyCells.length) {\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n\n    return emptyCells[randomIndex];\n  }\n}\n\nfunction sliderCellsInGroup(group) {\n  for (let i = 0; i < group.length; i++) {\n    if (group[i].isEmpty === true) {\n      continue;\n    }\n\n    const cellWithVelue = group[i];\n\n    let targetCell;\n    let j = i - 1;\n\n    while (j >= 0\n          && (group[j].isEmpty === true\n          || isEmptyForMerg(group[j], cellWithVelue))) {\n      if (isEmptyForMerg(group[j], cellWithVelue)) {\n        scoreCount += matrix[cellWithVelue.x][cellWithVelue.y] * 2;\n      }\n\n      targetCell = group[j];\n      j--;\n    }\n\n    const prevValue = matrix[cellWithVelue.x][cellWithVelue.y];\n\n    if (!targetCell) {\n      continue;\n    }\n\n    matrix[cellWithVelue.x][cellWithVelue.y] = 0;\n\n    replacementIsEmptyValue(cellWithVelue, targetCell);\n\n    matrix[targetCell.x][targetCell.y] += prevValue;\n\n    setDataToTable();\n  }\n}\n\nfunction replacementIsEmptyValue(cellWithVelue, targetCell) {\n  for (const tile of cells) {\n    if (tile.x === targetCell.x && tile.y === targetCell.y) {\n      tile.isEmpty = false;\n    }\n\n    if (tile.x === cellWithVelue.x && tile.y === cellWithVelue.y) {\n      tile.isEmpty = true;\n    }\n  }\n}\n\nfunction isEmptyForMerg(tile, cellWithVelue) {\n  return matrix[tile.x][tile.y] === matrix[cellWithVelue.x][cellWithVelue.y];\n}\n"]}