{
  "stats": {
    "suites": 2,
    "tests": 67,
    "passes": 60,
    "pending": 0,
    "failures": 7,
    "start": "2024-02-28T23:34:48.941Z",
    "end": "2024-02-28T23:35:40.228Z",
    "duration": 33051,
    "testsRegistered": 67,
    "passPercent": 89.55223880597015,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "title": "Game class",
      "suites": [],
      "tests": [
        {
          "title": "Game class > should be a function",
          "fullTitle": "Game class should be a function",
          "timedOut": false,
          "duration": 4,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "8cc527c0-8c63-4996-b690-5b6e3429c313",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > should have a constructor",
          "fullTitle": "Game class should have a constructor",
          "timedOut": false,
          "duration": 0,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "554745bd-6119-4c69-a370-ff937fe53604",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > core methods > should have a \"getState\" method",
          "fullTitle": "Game class core methods should have a \"getState\" method",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "2a906f48-7baf-4b72-afd4-2e0eac53555b",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > core methods > should have a \"getScore\" method",
          "fullTitle": "Game class core methods should have a \"getScore\" method",
          "timedOut": false,
          "duration": 0,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "ba0c286b-9d57-4f93-8d7e-fadd0b9b5c9d",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > core methods > should have a \"getStatus\" method",
          "fullTitle": "Game class core methods should have a \"getStatus\" method",
          "timedOut": false,
          "duration": 0,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "05d53a23-7f3d-43f3-b490-aef2b5ca4435",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > core methods > should have a \"moveLeft\" method",
          "fullTitle": "Game class core methods should have a \"moveLeft\" method",
          "timedOut": false,
          "duration": 0,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "18510e40-7b0d-4ea5-8364-9a9f21ef8128",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > core methods > should have a \"moveRight\" method",
          "fullTitle": "Game class core methods should have a \"moveRight\" method",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "b12c5d7d-23a3-4dd7-a08e-7b3450dbf0b6",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > core methods > should have a \"moveUp\" method",
          "fullTitle": "Game class core methods should have a \"moveUp\" method",
          "timedOut": false,
          "duration": 0,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "97d61651-ad66-4ba7-8298-38b8fadc5487",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > core methods > should have a \"moveDown\" method",
          "fullTitle": "Game class core methods should have a \"moveDown\" method",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "2da455f1-2df5-4393-b548-f1c826817724",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > core methods > should have a \"start\" method",
          "fullTitle": "Game class core methods should have a \"start\" method",
          "timedOut": false,
          "duration": 0,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "bd6ed908-6855-45ab-b2e3-f13a2043720e",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > core methods > should have a \"restart\" method",
          "fullTitle": "Game class core methods should have a \"restart\" method",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "c1003062-17f7-4d0f-8bef-352f53aaea50",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > initial state > should have a state of an empty board by default",
          "fullTitle": "Game class initial state should have a state of an empty board by default",
          "timedOut": false,
          "duration": 2,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "dd70aa62-1e2b-4fae-9d64-3c0e6f373fc8",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > initial state > should have a score of 0 by default",
          "fullTitle": "Game class initial state should have a score of 0 by default",
          "timedOut": false,
          "duration": 0,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "c76cee5b-7bf4-4a48-9b05-3fbf505f3e0b",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > initial state > should have a status of \"idle\" by default",
          "fullTitle": "Game class initial state should have a status of \"idle\" by default",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "42c4b0e3-f4bb-4bf4-953e-9986a05c2c16",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > initial state > should have a state of a custom board if the initial state is provided",
          "fullTitle": "Game class initial state should have a state of a custom board if the initial state is provided",
          "timedOut": false,
          "duration": 0,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "e46aae48-4c54-4f13-a0e6-2d9102423884",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > after start > should have a score of 0",
          "fullTitle": "Game class after start should have a score of 0",
          "timedOut": false,
          "duration": 0,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "303e97ce-ab33-49d4-be42-8f15d45fd64b",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > after start > should have a status of \"playing\"",
          "fullTitle": "Game class after start should have a status of \"playing\"",
          "timedOut": false,
          "duration": 0,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "3a012955-8e9e-4589-8645-ecbe17e3ec85",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > after start > should have a state with two cells with values 2 or 4",
          "fullTitle": "Game class after start should have a state with two cells with values 2 or 4",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "0b0a966a-a6db-470a-8dd4-d57323d04cf1",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > after start > should generate the board with 4s less often than with 2s",
          "fullTitle": "Game class after start should generate the board with 4s less often than with 2s",
          "timedOut": false,
          "duration": 3,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "9623bd12-f6f6-4842-95c1-3dbf8df78889",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > after start > should generate the board with cells in random positions",
          "fullTitle": "Game class after start should generate the board with cells in random positions",
          "timedOut": false,
          "duration": 20,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "fc288498-5933-4cd2-9f08-fcad1239e69e",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveLeft > should not move the board if the game is not started",
          "fullTitle": "Game class board movement methods moveLeft should not move the board if the game is not started",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "d9fae835-468f-44d4-9cf5-cd4f8d1eb389",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveLeft > should move all non-zero cells to the left",
          "fullTitle": "Game class board movement methods moveLeft should move all non-zero cells to the left",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "f8aa4e9c-6a13-438e-ba52-9be9925477da",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveLeft > should add a random cell with 2 or 4 at an empty position after the move",
          "fullTitle": "Game class board movement methods moveLeft should add a random cell with 2 or 4 at an empty position after the move",
          "timedOut": false,
          "duration": 2,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "401d72d5-ef0e-4fb3-8c11-4ee3d508118f",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveLeft > should stack cells to the left without merging",
          "fullTitle": "Game class board movement methods moveLeft should stack cells to the left without merging",
          "timedOut": false,
          "duration": 3,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "475b978a-f56c-4b32-b1b2-b4ec238a83f8",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveLeft > should merge cells with the same value",
          "fullTitle": "Game class board movement methods moveLeft should merge cells with the same value",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "c3e8942b-62be-4c6f-a435-a08e5201a38d",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveLeft > should merge multiple cells with the same value to the left",
          "fullTitle": "Game class board movement methods moveLeft should merge multiple cells with the same value to the left",
          "timedOut": false,
          "duration": 2,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "77a5287c-4bab-4005-a2a4-bd6852fe54b9",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveLeft > should not merge multiple cells with the same value to the left multiple times during the move",
          "fullTitle": "Game class board movement methods moveLeft should not merge multiple cells with the same value to the left multiple times during the move",
          "timedOut": false,
          "duration": 2,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "9b54b0ff-4e85-4812-a28e-e4816ccdef4f",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveLeft > should not move cells to the left if the move does not change the board",
          "fullTitle": "Game class board movement methods moveLeft should not move cells to the left if the move does not change the board",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "6fa087d3-dba0-4301-afe4-e3fab669cef4",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveRight > should not move the board if the game is not started",
          "fullTitle": "Game class board movement methods moveRight should not move the board if the game is not started",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "58887863-a9db-4d9f-8930-67a0e93796b9",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveRight > should move all non-zero cells to the right",
          "fullTitle": "Game class board movement methods moveRight should move all non-zero cells to the right",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "4e40f2a7-613f-4398-89da-3c8fdf334ef4",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveRight > should add a random cell with 2 or 4 at an empty position after the move",
          "fullTitle": "Game class board movement methods moveRight should add a random cell with 2 or 4 at an empty position after the move",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "b886b543-4db4-4ea2-ab0e-a78eff39d2ca",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveRight > should stack cells to the right without merging",
          "fullTitle": "Game class board movement methods moveRight should stack cells to the right without merging",
          "timedOut": false,
          "duration": 7,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "ddb7ec85-e579-4a6f-a852-1d6768d25c01",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveRight > should merge cells with the same value to the right",
          "fullTitle": "Game class board movement methods moveRight should merge cells with the same value to the right",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "accbca5d-7cde-4247-a11b-14f51d9b794b",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveRight > should merge multiple cells with the same value to the right",
          "fullTitle": "Game class board movement methods moveRight should merge multiple cells with the same value to the right",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "fb3a0510-1461-4cfd-978a-b6a4798c6b9b",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveRight > should not merge multiple cells with the same value to the right multiple times during the move",
          "fullTitle": "Game class board movement methods moveRight should not merge multiple cells with the same value to the right multiple times during the move",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "c13a34d5-2590-4809-b142-53dcb0b29a12",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveRight > should not move cells to the right if the move does not change the board",
          "fullTitle": "Game class board movement methods moveRight should not move cells to the right if the move does not change the board",
          "timedOut": false,
          "duration": 0,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "a24de85a-8fc0-4053-81c9-8c99159548c9",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveUp > should not move the board if the game is not started",
          "fullTitle": "Game class board movement methods moveUp should not move the board if the game is not started",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "ea2d4b17-0986-4e1b-9146-1bcc620f80b8",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveUp > should move all non-zero cells up",
          "fullTitle": "Game class board movement methods moveUp should move all non-zero cells up",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "8e3b2935-e5a2-4745-8cc9-adeb8afc4ed9",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveUp > should add a random cell with 2 or 4 at an empty position after the move",
          "fullTitle": "Game class board movement methods moveUp should add a random cell with 2 or 4 at an empty position after the move",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "89c68629-6bfb-4581-ae30-b5384f0e9d6e",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveUp > should stack cells up without merging",
          "fullTitle": "Game class board movement methods moveUp should stack cells up without merging",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "e5a882d7-d663-47ff-b795-a1eb1d82ba2d",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveUp > should merge cells with the same value up",
          "fullTitle": "Game class board movement methods moveUp should merge cells with the same value up",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "4e9e6593-a428-4a23-b57a-56e159f80584",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveUp > should merge multiple cells with the same value up",
          "fullTitle": "Game class board movement methods moveUp should merge multiple cells with the same value up",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "d2eaecaa-c774-425d-883f-462293d65556",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveUp > should not merge multiple cells with the same value up multiple times during the move",
          "fullTitle": "Game class board movement methods moveUp should not merge multiple cells with the same value up multiple times during the move",
          "timedOut": false,
          "duration": 2,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "936c7e8c-b380-41a1-a51d-86043e080eaf",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveUp > should not move cells up if the move does not change the board",
          "fullTitle": "Game class board movement methods moveUp should not move cells up if the move does not change the board",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "aea6e3f3-96b1-495e-b57d-c8eb9bf82516",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveDown > should not move the board if the game is not started",
          "fullTitle": "Game class board movement methods moveDown should not move the board if the game is not started",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "3b980e1c-9d3e-4a49-9fc9-6f24a91d8986",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveDown > should move all non-zero cells down",
          "fullTitle": "Game class board movement methods moveDown should move all non-zero cells down",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "945b2797-41bd-40a5-873c-f6c905f864c1",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveDown > should add a random cell with 2 or 4 at an empty position after the move",
          "fullTitle": "Game class board movement methods moveDown should add a random cell with 2 or 4 at an empty position after the move",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "3b6d2d2a-a442-4b0f-957e-b6df52b86fc6",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveDown > should stack cells down without merging",
          "fullTitle": "Game class board movement methods moveDown should stack cells down without merging",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "71135d2f-4e6a-4856-bd5a-e2f06ac41721",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveDown > should merge cells with the same value down",
          "fullTitle": "Game class board movement methods moveDown should merge cells with the same value down",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "12c6a8fc-de0b-470c-90c7-2e34f6a1c938",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveDown > should merge multiple cells with the same value down",
          "fullTitle": "Game class board movement methods moveDown should merge multiple cells with the same value down",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "e3eecc9d-3feb-497c-84e3-a66783e02c21",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveDown > should not merge multiple cells with the same value down multiple times during the move",
          "fullTitle": "Game class board movement methods moveDown should not merge multiple cells with the same value down multiple times during the move",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "ce936e05-4616-41e8-8459-6ec9e117c2b2",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > board movement methods > moveDown > should not move cells down if the move does not change the board",
          "fullTitle": "Game class board movement methods moveDown should not move cells down if the move does not change the board",
          "timedOut": false,
          "duration": 0,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "0ce27d54-25fa-4228-965b-fb68d71efc6e",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > game status > should be a \"playing\" when board is full but moves are still possible",
          "fullTitle": "Game class game status should be a \"playing\" when board is full but moves are still possible",
          "timedOut": false,
          "duration": 0,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "9325ccc9-e86f-4a44-87ee-fc5078d9079d",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > game status > should be a \"win\" when a 2048 tile is created",
          "fullTitle": "Game class game status should be a \"win\" when a 2048 tile is created",
          "timedOut": false,
          "duration": 0,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "ff6d015d-2b05-40d3-ace2-e2466ca57ea8",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > game status > should be a \"lose\" when no more moves are possible",
          "fullTitle": "Game class game status should be a \"lose\" when no more moves are possible",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "ed363298-d4eb-422a-ad39-3ecdc62793af",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > game score > should be updated after cells are merged horizontally",
          "fullTitle": "Game class game score should be updated after cells are merged horizontally",
          "timedOut": false,
          "duration": 0,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "b4d23528-8151-457e-bae1-a152a54cbfd3",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > game score > should be updated after cells are merged vertically",
          "fullTitle": "Game class game score should be updated after cells are merged vertically",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "2ce6421b-5fcb-46a9-aee1-f6da6b825766",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > game score > should be updated after cells are merged multiple times per line",
          "fullTitle": "Game class game score should be updated after cells are merged multiple times per line",
          "timedOut": false,
          "duration": 0,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "5796baa5-2e24-4a38-8e5a-111ff25b8e91",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > game reset > should reset the game score, status and set the board to the empty state",
          "fullTitle": "Game class game reset should reset the game score, status and set the board to the empty state",
          "timedOut": false,
          "duration": 1,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "8ed35ce9-653b-4661-88b2-ad6427db9198",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        },
        {
          "title": "Game class > game reset > should reset the game to the initial state if it was provided",
          "fullTitle": "Game class game reset should reset the game to the initial state if it was provided",
          "timedOut": false,
          "duration": 0,
          "pass": true,
          "fail": false,
          "pending": false,
          "code": "",
          "uuid": "466540af-202e-41ce-8496-952f59faf155",
          "parentUUID": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
          "skipped": false,
          "isHook": false,
          "err": {}
        }
      ],
      "pending": [],
      "root": false,
      "uuid": "b4f95454-6f0a-48b5-9ce4-6e5b4d1b7694",
      "_timeout": 5000,
      "fullFile": "D:\\IT\\Mateacademy\\js_2048_game\\tests\\Game.class.test.js",
      "file": "D:\\IT\\Mateacademy\\js_2048_game\\tests\\Game.class.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "passes": [
        "8cc527c0-8c63-4996-b690-5b6e3429c313",
        "554745bd-6119-4c69-a370-ff937fe53604",
        "2a906f48-7baf-4b72-afd4-2e0eac53555b",
        "ba0c286b-9d57-4f93-8d7e-fadd0b9b5c9d",
        "05d53a23-7f3d-43f3-b490-aef2b5ca4435",
        "18510e40-7b0d-4ea5-8364-9a9f21ef8128",
        "b12c5d7d-23a3-4dd7-a08e-7b3450dbf0b6",
        "97d61651-ad66-4ba7-8298-38b8fadc5487",
        "2da455f1-2df5-4393-b548-f1c826817724",
        "bd6ed908-6855-45ab-b2e3-f13a2043720e",
        "c1003062-17f7-4d0f-8bef-352f53aaea50",
        "dd70aa62-1e2b-4fae-9d64-3c0e6f373fc8",
        "c76cee5b-7bf4-4a48-9b05-3fbf505f3e0b",
        "42c4b0e3-f4bb-4bf4-953e-9986a05c2c16",
        "e46aae48-4c54-4f13-a0e6-2d9102423884",
        "303e97ce-ab33-49d4-be42-8f15d45fd64b",
        "3a012955-8e9e-4589-8645-ecbe17e3ec85",
        "0b0a966a-a6db-470a-8dd4-d57323d04cf1",
        "9623bd12-f6f6-4842-95c1-3dbf8df78889",
        "fc288498-5933-4cd2-9f08-fcad1239e69e",
        "d9fae835-468f-44d4-9cf5-cd4f8d1eb389",
        "f8aa4e9c-6a13-438e-ba52-9be9925477da",
        "401d72d5-ef0e-4fb3-8c11-4ee3d508118f",
        "475b978a-f56c-4b32-b1b2-b4ec238a83f8",
        "c3e8942b-62be-4c6f-a435-a08e5201a38d",
        "77a5287c-4bab-4005-a2a4-bd6852fe54b9",
        "9b54b0ff-4e85-4812-a28e-e4816ccdef4f",
        "6fa087d3-dba0-4301-afe4-e3fab669cef4",
        "58887863-a9db-4d9f-8930-67a0e93796b9",
        "4e40f2a7-613f-4398-89da-3c8fdf334ef4",
        "b886b543-4db4-4ea2-ab0e-a78eff39d2ca",
        "ddb7ec85-e579-4a6f-a852-1d6768d25c01",
        "accbca5d-7cde-4247-a11b-14f51d9b794b",
        "fb3a0510-1461-4cfd-978a-b6a4798c6b9b",
        "c13a34d5-2590-4809-b142-53dcb0b29a12",
        "a24de85a-8fc0-4053-81c9-8c99159548c9",
        "ea2d4b17-0986-4e1b-9146-1bcc620f80b8",
        "8e3b2935-e5a2-4745-8cc9-adeb8afc4ed9",
        "89c68629-6bfb-4581-ae30-b5384f0e9d6e",
        "e5a882d7-d663-47ff-b795-a1eb1d82ba2d",
        "4e9e6593-a428-4a23-b57a-56e159f80584",
        "d2eaecaa-c774-425d-883f-462293d65556",
        "936c7e8c-b380-41a1-a51d-86043e080eaf",
        "aea6e3f3-96b1-495e-b57d-c8eb9bf82516",
        "3b980e1c-9d3e-4a49-9fc9-6f24a91d8986",
        "945b2797-41bd-40a5-873c-f6c905f864c1",
        "3b6d2d2a-a442-4b0f-957e-b6df52b86fc6",
        "71135d2f-4e6a-4856-bd5a-e2f06ac41721",
        "12c6a8fc-de0b-470c-90c7-2e34f6a1c938",
        "e3eecc9d-3feb-497c-84e3-a66783e02c21",
        "ce936e05-4616-41e8-8459-6ec9e117c2b2",
        "0ce27d54-25fa-4228-965b-fb68d71efc6e",
        "9325ccc9-e86f-4a44-87ee-fc5078d9079d",
        "ff6d015d-2b05-40d3-ace2-e2466ca57ea8",
        "ed363298-d4eb-422a-ad39-3ecdc62793af",
        "b4d23528-8151-457e-bae1-a152a54cbfd3",
        "2ce6421b-5fcb-46a9-aee1-f6da6b825766",
        "5796baa5-2e24-4a38-8e5a-111ff25b8e91",
        "8ed35ce9-653b-4661-88b2-ad6427db9198",
        "466540af-202e-41ce-8496-952f59faf155"
      ],
      "failures": [],
      "skipped": [],
      "duration": 638
    },
    {
      "uuid": "f0c80d2a-ee3c-4de7-a572-99f9702d3f3c",
      "title": "",
      "fullFile": "cypress/integration/js2048Game.spec.js",
      "file": "cypress/integration/js2048Game.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a4718edf-3460-4d9e-8eaa-91a967d53785",
          "title": "2048 game UI",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should show the initial score",
              "fullTitle": "2048 game UI should show the initial score",
              "timedOut": null,
              "duration": 5254,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('.button.start').click();\ncy.get('.game-score').should('have.value', '');",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.button.start`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.button.start`, but never found it.\n    at Context.eval (http://localhost:3001/__cypress/tests?p=cypress\\integration\\js2048Game.spec.js:112:8)",
                "diff": null
              },
              "uuid": "dfaeeacf-8f98-4d31-b922-363674c65e13",
              "parentUUID": "a4718edf-3460-4d9e-8eaa-91a967d53785",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show the score shuffling to the left and up only",
              "fullTitle": "2048 game UI should show the score shuffling to the left and up only",
              "timedOut": null,
              "duration": 4611,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.shuffleBoxes('{leftArrow}', '{upArrow}', 3);\ncy.get('.game-score').invoke('text').then(parseFloat).should('be.gt', 1);",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.button.start`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.button.start`, but never found it.\n    at Context.eval (http://localhost:3001/__cypress/tests?p=cypress\\integration\\js2048Game.spec.js:100:6)",
                "diff": null
              },
              "uuid": "b5b61e5e-97a4-4ae3-900d-2154f855f77f",
              "parentUUID": "a4718edf-3460-4d9e-8eaa-91a967d53785",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show the score shuffling to the right and up only",
              "fullTitle": "2048 game UI should show the score shuffling to the right and up only",
              "timedOut": null,
              "duration": 4596,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.shuffleBoxes('{rightArrow}', '{upArrow}', 3);\ncy.get('.game-score').invoke('text').then(parseFloat).should('be.gt', 1);",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.button.start`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.button.start`, but never found it.\n    at Context.eval (http://localhost:3001/__cypress/tests?p=cypress\\integration\\js2048Game.spec.js:100:6)",
                "diff": null
              },
              "uuid": "d9a58c30-d062-46b8-9c8a-7de8b318f353",
              "parentUUID": "a4718edf-3460-4d9e-8eaa-91a967d53785",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show the score shuffling to the right and down only",
              "fullTitle": "2048 game UI should show the score shuffling to the right and down only",
              "timedOut": null,
              "duration": 4654,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.shuffleBoxes('{rightArrow}', '{downArrow}', 3);\ncy.get('.game-score').invoke('text').then(parseFloat).should('be.gt', 1);",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.button.start`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.button.start`, but never found it.\n    at Context.eval (http://localhost:3001/__cypress/tests?p=cypress\\integration\\js2048Game.spec.js:100:6)",
                "diff": null
              },
              "uuid": "d826539f-e778-4b44-8011-28230d453c69",
              "parentUUID": "a4718edf-3460-4d9e-8eaa-91a967d53785",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show the score shuffling to the left and down only",
              "fullTitle": "2048 game UI should show the score shuffling to the left and down only",
              "timedOut": null,
              "duration": 4684,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.shuffleBoxes('{leftArrow}', '{downArrow}', 3);\ncy.get('.game-score').invoke('text').then(parseFloat).should('be.gt', 1);",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.button.start`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.button.start`, but never found it.\n    at Context.eval (http://localhost:3001/__cypress/tests?p=cypress\\integration\\js2048Game.spec.js:100:6)",
                "diff": null
              },
              "uuid": "99252598-0f6b-455f-9f74-9c937ef36c1a",
              "parentUUID": "a4718edf-3460-4d9e-8eaa-91a967d53785",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reset the score",
              "fullTitle": "2048 game UI should reset the score",
              "timedOut": null,
              "duration": 4555,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.shuffleBoxes('{leftArrow}', '{downArrow}', 3);\ncy.get('.game-score').invoke('text').then(parseFloat).should('be.gt', 1);\ncy.get('.button.restart').click();\ncy.get('.game-score').should('have.value', '');",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.button.start`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.button.start`, but never found it.\n    at Context.eval (http://localhost:3001/__cypress/tests?p=cypress\\integration\\js2048Game.spec.js:100:6)",
                "diff": null
              },
              "uuid": "62743765-955d-4f5f-909d-8968a10635d1",
              "parentUUID": "a4718edf-3460-4d9e-8eaa-91a967d53785",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show message in case of the loss",
              "fullTitle": "2048 game UI should show message in case of the loss",
              "timedOut": null,
              "duration": 4617,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('.button.start').click();\nfor (let n = 0; n < 100; n++) {\n  cy.get('body').type('{rightArrow}');\n  cy.get('body').type('{downArrow}');\n  cy.get('body').type('{leftArrow}');\n  cy.get('body').type('{upArrow}');\n}\ncy.contains('You lose! Restart the game?').should('be.visible');",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.button.start`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.button.start`, but never found it.\n    at Context.eval (http://localhost:3001/__cypress/tests?p=cypress\\integration\\js2048Game.spec.js:138:8)",
                "diff": null
              },
              "uuid": "197eed2e-fc27-4cc6-be1c-e1924856bc44",
              "parentUUID": "a4718edf-3460-4d9e-8eaa-91a967d53785",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "dfaeeacf-8f98-4d31-b922-363674c65e13",
            "b5b61e5e-97a4-4ae3-900d-2154f855f77f",
            "d9a58c30-d062-46b8-9c8a-7de8b318f353",
            "d826539f-e778-4b44-8011-28230d453c69",
            "99252598-0f6b-455f-9f74-9c937ef36c1a",
            "62743765-955d-4f5f-909d-8968a10635d1",
            "197eed2e-fc27-4cc6-be1c-e1924856bc44"
          ],
          "pending": [],
          "skipped": [],
          "duration": 32971,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ]
}