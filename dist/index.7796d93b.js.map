{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ static GameStatus = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.state = JSON.parse(JSON.stringify(initialState));\n        this.initialState = JSON.parse(JSON.stringify(initialState));\n        this.status = $a5fd07fa01589658$var$Game.GameStatus.idle;\n        this.score = 0;\n    }\n    moveLeft() {\n        if (this.getStatus() === \"playing\") {\n            const newState = [\n                ...this.state\n            ];\n            for(let i = 0; i < this.state.length; i++)newState[i] = this.move(newState[i]);\n            if (this.canMerge(newState)) {\n                this.state = [\n                    ...newState\n                ];\n                this.isWin();\n                this.generateGameNumber();\n            }\n            this.isLose(newState);\n        }\n    }\n    moveRight() {\n        if (this.getStatus() === \"playing\") {\n            const newState = [\n                ...this.state\n            ];\n            for(let i = 0; i < this.state.length; i++){\n                let row = [\n                    ...newState[i]\n                ];\n                row.reverse();\n                row = this.move(row);\n                row.reverse();\n                newState[i] = row;\n            }\n            if (this.canMerge(newState)) {\n                this.state = [\n                    ...newState\n                ];\n                this.isWin();\n                this.generateGameNumber();\n            }\n            this.isLose(newState);\n        }\n    }\n    moveUp() {\n        if (this.getStatus() === \"playing\") {\n            const newState = [\n                ...Array(4)\n            ].map(()=>Array(4).fill(0));\n            for(let i = 0; i < this.state.length; i++){\n                let row = [\n                    this.state[0][i],\n                    this.state[1][i],\n                    this.state[2][i],\n                    this.state[3][i]\n                ];\n                row = this.move(row);\n                for(let j = 0; j < this.state.length; j++)newState[j][i] = row[j];\n            }\n            if (this.canMerge(newState)) {\n                this.state = [\n                    ...newState\n                ];\n                this.isWin();\n                this.generateGameNumber();\n            }\n            this.isLose(newState);\n        }\n    }\n    moveDown() {\n        if (this.getStatus() === \"playing\") {\n            const newState = [\n                ...Array(4)\n            ].map(()=>Array(4).fill(0));\n            for(let i = 0; i < this.state.length; i++){\n                let row = [\n                    this.state[0][i],\n                    this.state[1][i],\n                    this.state[2][i],\n                    this.state[3][i]\n                ].reverse();\n                row = this.move(row);\n                row = row.reverse();\n                for(let j = 0; j < this.state.length; j++)newState[j][i] = row[j];\n            }\n            if (this.canMerge(newState)) {\n                this.state = [\n                    ...newState\n                ];\n                this.isWin();\n                this.generateGameNumber();\n            }\n            this.isLose(newState);\n        }\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.GameStatus.playing;\n        this.generateGameNumber();\n        this.generateGameNumber();\n    }\n    restart() {\n        this.state = JSON.parse(JSON.stringify(this.initialState));\n        this.status = $a5fd07fa01589658$var$Game.GameStatus.idle;\n        this.score = 0;\n    }\n    move(row) {\n        const filteredRow = row.filter((num)=>num !== 0);\n        for(let i = 0; i < filteredRow.length - 1; i++)if (filteredRow[i] === filteredRow[i + 1]) {\n            filteredRow[i] *= 2;\n            filteredRow[i + 1] = 0;\n            this.score += filteredRow[i];\n        }\n        const newRow = filteredRow.filter((num)=>num !== 0);\n        while(newRow.length < 4)newRow.push(0);\n        return newRow;\n    }\n    isWin() {\n        for(let rowIndex = 0; rowIndex < this.state.length; rowIndex++){\n            for(let columnIndex = 0; columnIndex < this.state[rowIndex].length; columnIndex++)if (this.state[rowIndex][columnIndex] === 2048) {\n                this.status = $a5fd07fa01589658$var$Game.GameStatus.win;\n                return;\n            }\n        }\n    }\n    canMerge(newState) {\n        return JSON.stringify(newState) !== JSON.stringify(this.state);\n    }\n    canMove() {\n        const stateLength = this.state.length;\n        for(let i = 0; i < stateLength; i++)for(let j = 0; j < stateLength; j++){\n            if (j < stateLength - 1 && this.state[i][j] === this.state[i][j + 1] || i < stateLength - 1 && this.state[i][j] === this.state[i + 1][j]) return true;\n        }\n        return false;\n    }\n    emptyCellsCount() {\n        const emptyCells = [];\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 0) emptyCells.push([\n                i,\n                j\n            ]);\n        }\n        return emptyCells;\n    }\n    generateGameNumber() {\n        const emptyCells = this.emptyCellsCount();\n        if (emptyCells.length !== 0) {\n            const getRandomEmptyCell = Math.floor(Math.random() * emptyCells.length);\n            const column = emptyCells[getRandomEmptyCell][1];\n            const row = emptyCells[getRandomEmptyCell][0];\n            this.state[row][column] = Math.random() >= 0.9 ? 4 : 2;\n        }\n    }\n    isLose() {\n        if (this.emptyCellsCount().length === 0 && !this.canMove()) this.status = $a5fd07fa01589658$var$Game.GameStatus.lose;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$startButton.textContent === \"Start\") {\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n        $09e991522ca7e64e$var$startButton.classList.replace(\"start\", \"restart\");\n        $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$renderGame();\n    } else if ($09e991522ca7e64e$var$startButton.textContent === \"Restart\") {\n        $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n        $09e991522ca7e64e$var$startButton.classList.replace(\"restart\", \"start\");\n        $09e991522ca7e64e$var$startMessage.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$renderGame();\n        $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n    }\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n        if (e.key === \"ArrowUp\") $09e991522ca7e64e$var$game.moveUp();\n        if (e.key === \"ArrowDown\") $09e991522ca7e64e$var$game.moveDown();\n        if (e.key === \"ArrowLeft\") $09e991522ca7e64e$var$game.moveLeft();\n        if (e.key === \"ArrowRight\") $09e991522ca7e64e$var$game.moveRight();\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.GameStatus.lose) $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.GameStatus.win) $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$renderGame();\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n});\nfunction $09e991522ca7e64e$var$renderGame() {\n    const rows = [\n        ...document.querySelectorAll(\".field-row\")\n    ];\n    const cells = rows.map((row)=>[\n            ...row.children\n        ]);\n    const state = $09e991522ca7e64e$var$game.getState();\n    state.forEach((row, i)=>{\n        row.forEach((cell, j)=>{\n            const currentCell = cells[i][j];\n            currentCell.className = !cell ? \"field-cell\" : `field-cell field-cell--${cell}`;\n            currentCell.innerHTML = !cell ? \"\" : cell;\n        });\n    });\n}\n\n\n//# sourceMappingURL=index.7796d93b.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst startButton = document.querySelector('.button.start');\nconst startMessage = document.querySelector('.message-start');\nconst gameScore = document.querySelector('.game-score');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nstartButton.addEventListener('click', () => {\n  if (startButton.textContent === 'Start') {\n    startButton.textContent = 'Restart';\n    startButton.classList.replace('start', 'restart');\n    startMessage.classList.add('hidden');\n\n    game.start();\n    renderGame();\n  } else if (startButton.textContent === 'Restart') {\n    startButton.textContent = 'Start';\n    startButton.classList.replace('restart', 'start');\n    startMessage.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n\n    game.restart();\n    renderGame();\n\n    gameScore.textContent = game.getScore();\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() === 'playing') {\n    if (e.key === 'ArrowUp') {\n      game.moveUp();\n    }\n\n    if (e.key === 'ArrowDown') {\n      game.moveDown();\n    }\n\n    if (e.key === 'ArrowLeft') {\n      game.moveLeft();\n    }\n\n    if (e.key === 'ArrowRight') {\n      game.moveRight();\n    }\n  }\n\n  if (game.getStatus() === Game.GameStatus.lose) {\n    messageLose.classList.remove('hidden');\n  }\n\n  if (game.getStatus() === Game.GameStatus.win) {\n    messageWin.classList.remove('hidden');\n  }\n\n  renderGame();\n\n  gameScore.textContent = game.getScore();\n});\n\nfunction renderGame() {\n  const rows = [...document.querySelectorAll('.field-row')];\n  const cells = rows.map((row) => [...row.children]);\n\n  const state = game.getState();\n\n  state.forEach((row, i) => {\n    row.forEach((cell, j) => {\n      const currentCell = cells[i][j];\n\n      currentCell.className = !cell\n        ? 'field-cell'\n        : `field-cell field-cell--${cell}`;\n      currentCell.innerHTML = !cell ? '' : cell;\n    });\n  });\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n\n  static GameStatus = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.state = JSON.parse(JSON.stringify(initialState));\n    this.initialState = JSON.parse(JSON.stringify(initialState));\n    this.status = Game.GameStatus.idle;\n    this.score = 0;\n  }\n\n  moveLeft() {\n    if (this.getStatus() === 'playing') {\n      const newState = [...this.state];\n\n      for (let i = 0; i < this.state.length; i++) {\n        newState[i] = this.move(newState[i]);\n      }\n\n      if (this.canMerge(newState)) {\n        this.state = [...newState];\n        this.isWin();\n        this.generateGameNumber();\n      }\n\n      this.isLose(newState);\n    }\n  }\n\n  moveRight() {\n    if (this.getStatus() === 'playing') {\n      const newState = [...this.state];\n\n      for (let i = 0; i < this.state.length; i++) {\n        let row = [...newState[i]];\n\n        row.reverse();\n\n        row = this.move(row);\n\n        row.reverse();\n\n        newState[i] = row;\n      }\n\n      if (this.canMerge(newState)) {\n        this.state = [...newState];\n        this.isWin();\n        this.generateGameNumber();\n      }\n\n      this.isLose(newState);\n    }\n  }\n\n  moveUp() {\n    if (this.getStatus() === 'playing') {\n      const newState = [...Array(4)].map(() => Array(4).fill(0));\n\n      for (let i = 0; i < this.state.length; i++) {\n        let row = [\n          this.state[0][i],\n          this.state[1][i],\n          this.state[2][i],\n          this.state[3][i],\n        ];\n\n        row = this.move(row);\n\n        for (let j = 0; j < this.state.length; j++) {\n          newState[j][i] = row[j];\n        }\n      }\n\n      if (this.canMerge(newState)) {\n        this.state = [...newState];\n        this.isWin();\n        this.generateGameNumber();\n      }\n\n      this.isLose(newState);\n    }\n  }\n\n  moveDown() {\n    if (this.getStatus() === 'playing') {\n      const newState = [...Array(4)].map(() => Array(4).fill(0));\n\n      for (let i = 0; i < this.state.length; i++) {\n        let row = [\n          this.state[0][i],\n          this.state[1][i],\n          this.state[2][i],\n          this.state[3][i],\n        ].reverse();\n\n        row = this.move(row);\n        row = row.reverse();\n\n        for (let j = 0; j < this.state.length; j++) {\n          newState[j][i] = row[j];\n        }\n      }\n\n      if (this.canMerge(newState)) {\n        this.state = [...newState];\n        this.isWin();\n        this.generateGameNumber();\n      }\n\n      this.isLose(newState);\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.GameStatus.playing;\n    this.generateGameNumber();\n    this.generateGameNumber();\n  }\n\n  restart() {\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n    this.status = Game.GameStatus.idle;\n    this.score = 0;\n  }\n\n  move(row) {\n    const filteredRow = row.filter((num) => num !== 0);\n\n    for (let i = 0; i < filteredRow.length - 1; i++) {\n      if (filteredRow[i] === filteredRow[i + 1]) {\n        filteredRow[i] *= 2;\n        filteredRow[i + 1] = 0;\n        this.score += filteredRow[i];\n      }\n    }\n\n    const newRow = filteredRow.filter((num) => num !== 0);\n\n    while (newRow.length < 4) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  isWin() {\n    for (let rowIndex = 0; rowIndex < this.state.length; rowIndex++) {\n      for (\n        let columnIndex = 0;\n        columnIndex < this.state[rowIndex].length;\n        columnIndex++\n      ) {\n        if (this.state[rowIndex][columnIndex] === 2048) {\n          this.status = Game.GameStatus.win;\n\n          return;\n        }\n      }\n    }\n  }\n\n  canMerge(newState) {\n    return JSON.stringify(newState) !== JSON.stringify(this.state);\n  }\n\n  canMove() {\n    const stateLength = this.state.length;\n\n    for (let i = 0; i < stateLength; i++) {\n      for (let j = 0; j < stateLength; j++) {\n        if (\n          (j < stateLength - 1 && this.state[i][j] === this.state[i][j + 1]) ||\n          (i < stateLength - 1 && this.state[i][j] === this.state[i + 1][j])\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  emptyCellsCount() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    return emptyCells;\n  }\n\n  generateGameNumber() {\n    const emptyCells = this.emptyCellsCount();\n\n    if (emptyCells.length !== 0) {\n      const getRandomEmptyCell = Math.floor(Math.random() * emptyCells.length);\n      const column = emptyCells[getRandomEmptyCell][1];\n      const row = emptyCells[getRandomEmptyCell][0];\n\n      this.state[row][column] = Math.random() >= 0.9 ? 4 : 2;\n    }\n  }\n\n  isLose() {\n    if (this.emptyCellsCount().length === 0 && !this.canMove()) {\n      this.status = Game.GameStatus.lose;\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","GameStatus","idle","playing","win","lose","constructor","initialState","state","JSON","parse","stringify","status","score","moveLeft","getStatus","newState","i","length","move","canMerge","isWin","generateGameNumber","isLose","moveRight","row","reverse","moveUp","map","Array","fill","j","moveDown","getScore","getState","start","restart","filteredRow","filter","num","newRow","push","rowIndex","columnIndex","canMove","stateLength","emptyCellsCount","emptyCells","getRandomEmptyCell","Math","floor","random","column","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$startButton","document","querySelector","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$renderGame","cells","rows","querySelectorAll","children","forEach","cell","currentCell","className","innerHTML","addEventListener","textContent","classList","replace","add","remove","e","key"],"version":3,"file":"index.7796d93b.js.map"}