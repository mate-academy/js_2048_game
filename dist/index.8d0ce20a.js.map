{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_define_property.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n'use strict';\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $cd5a47cf8ef6d766$export$71511d61b312f219(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n'use strict';\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        (0, $cd5a47cf8ef6d766$export$71511d61b312f219)(this, \"score\", 0);\n        (0, $cd5a47cf8ef6d766$export$71511d61b312f219)(this, \"status\", 'idle');\n        (0, $cd5a47cf8ef6d766$export$71511d61b312f219)(this, \"board\", [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ]);\n        if (initialState) {\n            this.initialState = initialState.map(function(row) {\n                return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n            });\n            this.board = initialState;\n        }\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                if (this.status === 'idle') return;\n                var newState = [];\n                var currectScore = this.score;\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.board[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        var newRow = row.filter(function(cell) {\n                            return cell !== 0;\n                        });\n                        for(var i = 1; i < newRow.length; i++)if (newRow[i] === newRow[i - 1]) {\n                            var sum = newRow[i] + newRow[i - 1];\n                            this.score += sum;\n                            newRow.splice(i - 1, 2, sum);\n                        }\n                        while(newRow.length < 4)newRow.push(0);\n                        newState.push(newRow);\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                if (this.deepEqualBoards(newState, this.board) === true) return;\n                this.board = newState;\n                if (this.checkWin()) this.status = 'win';\n                if (currectScore === this.score && this.getEmptyCells().length === 0 && this.checkAvailableMoves() === false) {\n                    this.status = 'lose';\n                    return;\n                }\n                this.setRandomNumberOnCell();\n                if (this.getEmptyCells().length === 0 && this.checkAvailableMoves() === false) this.status = 'lose';\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                if (this.status === 'idle') return;\n                var newState = [];\n                var currectScore = this.score;\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.board[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        var newRow = row.filter(function(cell) {\n                            return cell !== 0;\n                        });\n                        for(var i = newRow.length - 2; i >= 0; i--)if (newRow[i] === newRow[i + 1]) {\n                            var sum = newRow[i] + newRow[i + 1];\n                            this.score += sum;\n                            newRow.splice(i, 2, sum);\n                            i--;\n                        }\n                        while(newRow.length < 4)newRow.unshift(0);\n                        newState.push(newRow);\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                if (this.deepEqualBoards(newState, this.board) === true) return;\n                this.board = newState;\n                if (this.checkWin()) this.status = 'win';\n                if (currectScore === this.score && this.getEmptyCells().length === 0 && this.checkAvailableMoves() === false) {\n                    this.status = 'lose';\n                    return;\n                }\n                this.setRandomNumberOnCell();\n                if (this.getEmptyCells().length === 0 && this.checkAvailableMoves() === false) this.status = 'lose';\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                if (this.status === 'idle') return;\n                var currectScore = this.score;\n                var columns = Array.from({\n                    length: 4\n                }, function() {\n                    return [];\n                });\n                var newState = Array.from({\n                    length: 4\n                }, function() {\n                    return [];\n                });\n                var newStateColumns = [];\n                for(var col = 0; col < 4; col++)for(var row = 0; row < 4; row++)columns[col].push(this.board[row][col]);\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = columns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var col1 = _step.value;\n                        var newCol = col1.filter(function(cell) {\n                            return cell !== 0;\n                        });\n                        for(var i = 1; i < newCol.length; i++)if (newCol[i] === newCol[i - 1]) {\n                            var sum = newCol[i] + newCol[i - 1];\n                            this.score += sum;\n                            newCol.splice(i - 1, 2, sum);\n                        }\n                        while(newCol.length < 4)newCol.push(0);\n                        newStateColumns.push(newCol);\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                for(var row1 = 0; row1 < 4; row1++)for(var col2 = 0; col2 < 4; col2++)newState[row1].push(newStateColumns[col2][row1]);\n                if (this.deepEqualBoards(newState, this.board) === true) return;\n                this.board = newState;\n                if (this.checkWin()) this.status = 'win';\n                if (currectScore === this.score && this.getEmptyCells().length === 0 && this.checkAvailableMoves() === false) {\n                    this.status = 'lose';\n                    return;\n                }\n                this.setRandomNumberOnCell();\n                if (this.getEmptyCells().length === 0 && this.checkAvailableMoves() === false) this.status = 'lose';\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                if (this.status === 'idle') return;\n                var currectScore = this.score;\n                var columns = Array.from({\n                    length: 4\n                }, function() {\n                    return [];\n                });\n                var newState = Array.from({\n                    length: 4\n                }, function() {\n                    return [];\n                });\n                var newStateColumns = [];\n                for(var col = 0; col < 4; col++)for(var row = 0; row < 4; row++)columns[col].push(this.board[row][col]);\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = columns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var col1 = _step.value;\n                        var newCol = col1.filter(function(cell) {\n                            return cell !== 0;\n                        });\n                        for(var i = newCol.length - 2; i >= 0; i--)if (newCol[i] === newCol[i + 1]) {\n                            var sum = newCol[i] + newCol[i + 1];\n                            this.score += sum;\n                            newCol.splice(i, 2, sum);\n                            i--;\n                        }\n                        while(newCol.length < 4)newCol.unshift(0);\n                        newStateColumns.push(newCol);\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                for(var row1 = 0; row1 < 4; row1++)for(var col2 = 0; col2 < 4; col2++)newState[row1].push(newStateColumns[col2][row1]);\n                if (this.deepEqualBoards(newState, this.board) === true) return;\n                this.board = newState;\n                if (this.checkWin()) this.status = 'win';\n                if (currectScore === this.score && this.getEmptyCells().length === 0 && this.checkAvailableMoves() === false) {\n                    this.status = 'lose';\n                    return;\n                }\n                this.setRandomNumberOnCell();\n                if (this.getEmptyCells().length === 0 && this.checkAvailableMoves() === false) this.status = 'lose';\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                if (this.status !== 'playing') {\n                    this.setRandomNumberOnCell();\n                    this.status = 'playing';\n                } else {\n                    this.board = this.initialState || [\n                        [\n                            0,\n                            0,\n                            0,\n                            0\n                        ],\n                        [\n                            0,\n                            0,\n                            0,\n                            0\n                        ],\n                        [\n                            0,\n                            0,\n                            0,\n                            0\n                        ],\n                        [\n                            0,\n                            0,\n                            0,\n                            0\n                        ]\n                    ];\n                    this.setRandomNumberOnCell();\n                    this.setRandomNumberOnCell();\n                }\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.score = 0;\n                this.board = this.initialState || [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n                if (this.initialState) {\n                    this.status = 'idle';\n                    return;\n                }\n                this.status = 'idle';\n                this.setRandomNumberOnCell();\n                this.status = 'playing';\n            }\n        },\n        {\n            key: \"setRandomNumberOnCell\",\n            value: function setRandomNumberOnCell() {\n                var emptyCells = this.getEmptyCells();\n                if (this.status === 'idle' && emptyCells.length >= 2) {\n                    var indexEmptyCell1 = Math.floor(Math.random() * emptyCells.length);\n                    var indexEmptyCell2;\n                    do indexEmptyCell2 = Math.floor(Math.random() * emptyCells.length);\n                    while (indexEmptyCell1 === indexEmptyCell2);\n                    this.board[emptyCells[indexEmptyCell1].row][emptyCells[indexEmptyCell1].col] = Math.random() <= 0.1 ? 4 : 2;\n                    this.board[emptyCells[indexEmptyCell2].row][emptyCells[indexEmptyCell2].col] = Math.random() <= 0.1 ? 4 : 2;\n                } else if (emptyCells.length >= 1) {\n                    var indexEmptyCell = Math.floor(Math.random() * emptyCells.length);\n                    this.board[emptyCells[indexEmptyCell].row][emptyCells[indexEmptyCell].col] = Math.random() <= 0.1 ? 4 : 2;\n                }\n            }\n        },\n        {\n            key: \"getEmptyCells\",\n            value: function getEmptyCells() {\n                var emptyCells = [];\n                for(var row = 0; row < 4; row++){\n                    for(var col = 0; col < 4; col++)if (this.board[row][col] === 0) emptyCells.push({\n                        row: row,\n                        col: col\n                    });\n                }\n                return emptyCells;\n            }\n        },\n        {\n            key: \"checkAvailableMoves\",\n            value: function checkAvailableMoves() {\n                var canMerge = false;\n                for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++){\n                    if (col < 3 && this.board[row][col] === this.board[row][col + 1]) canMerge = true;\n                    if (row < 3 && this.board[row][col] === this.board[row + 1][col]) canMerge = true;\n                }\n                return canMerge;\n            }\n        },\n        {\n            key: \"checkWin\",\n            value: function checkWin() {\n                var gameWin = false;\n                for(var row = 0; row < 4; row++){\n                    for(var col = 0; col < 4; col++)if (this.board[row][col] === 2048) {\n                        gameWin = true;\n                        this.status = 'win';\n                    }\n                }\n                return gameWin;\n            }\n        },\n        {\n            key: \"deepEqualBoards\",\n            value: function deepEqualBoards(board1, board2) {\n                return board1.every(function(row, rowIndex) {\n                    return(// eslint-disable-next-line prettier/prettier\n                    row.every(function(cell, colIndex) {\n                        return cell === board2[rowIndex][colIndex];\n                    }));\n                });\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$startMessage = document.querySelector('.message-start');\nvar $197cd56b15c33885$var$winMessage = document.querySelector('.message-win');\nvar $197cd56b15c33885$var$loseMessage = document.querySelector('.message-lose');\nvar $197cd56b15c33885$var$startButton = document.querySelector('.start');\nvar $197cd56b15c33885$var$rows = document.querySelectorAll('.field-row');\nvar $197cd56b15c33885$var$score = document.querySelector('.game-score');\n$197cd56b15c33885$var$startButton.addEventListener('click', function() {\n    if ($197cd56b15c33885$var$startButton.classList.contains('restart')) {\n        $197cd56b15c33885$var$loseMessage.classList.add('hidden');\n        $197cd56b15c33885$var$winMessage.classList.add('hidden');\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$updateBoard();\n        $197cd56b15c33885$var$score.textContent = 0;\n    } else {\n        $197cd56b15c33885$var$startMessage.classList.add('hidden');\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$updateBoard();\n    }\n});\ndocument.addEventListener('keydown', $197cd56b15c33885$var$handleMove);\nvar $197cd56b15c33885$var$touchStartX = 0;\nvar $197cd56b15c33885$var$touchStartY = 0;\nvar $197cd56b15c33885$var$touchEndX = 0;\nvar $197cd56b15c33885$var$touchEndY = 0;\ndocument.addEventListener('touchstart', function(ev) {\n    $197cd56b15c33885$var$touchStartX = ev.touches[0].clientX;\n    $197cd56b15c33885$var$touchStartY = ev.touches[0].clientY;\n});\ndocument.addEventListener('touchmove', function(ev) {\n    ev.preventDefault();\n}, {\n    passive: false\n});\ndocument.addEventListener('touchend', function(ev) {\n    $197cd56b15c33885$var$touchEndX = ev.changedTouches[0].clientX;\n    $197cd56b15c33885$var$touchEndY = ev.changedTouches[0].clientY;\n    $197cd56b15c33885$var$handleSwipe();\n});\nfunction $197cd56b15c33885$var$handleSwipe() {\n    var diffX = $197cd56b15c33885$var$touchEndX - $197cd56b15c33885$var$touchStartX;\n    var diffY = $197cd56b15c33885$var$touchEndY - $197cd56b15c33885$var$touchStartY;\n    if (Math.abs(diffX) > Math.abs(diffY)) {\n        if (diffX > 50) $197cd56b15c33885$var$handleMove({\n            key: 'ArrowRight'\n        });\n        else if (diffX < -50) $197cd56b15c33885$var$handleMove({\n            key: 'ArrowLeft'\n        });\n    } else {\n        if (diffY > 50) $197cd56b15c33885$var$handleMove({\n            key: 'ArrowDown'\n        });\n        else if (diffY < -50) $197cd56b15c33885$var$handleMove({\n            key: 'ArrowUp'\n        });\n    }\n}\nfunction $197cd56b15c33885$var$handleMove(ev) {\n    if ($197cd56b15c33885$var$game.status === 'lose') return;\n    if ($197cd56b15c33885$var$startMessage.classList.contains('hidden')) {\n        $197cd56b15c33885$var$startButton.setAttribute('class', 'button restart');\n        $197cd56b15c33885$var$startButton.textContent = 'Restart';\n        switch(ev.key){\n            case 'ArrowLeft':\n                $197cd56b15c33885$var$game.moveLeft();\n                break;\n            case 'ArrowRight':\n                $197cd56b15c33885$var$game.moveRight();\n                break;\n            case 'ArrowUp':\n                $197cd56b15c33885$var$game.moveUp();\n                break;\n            case 'ArrowDown':\n                $197cd56b15c33885$var$game.moveDown();\n                break;\n        }\n        $197cd56b15c33885$var$score.textContent = $197cd56b15c33885$var$game.score;\n        $197cd56b15c33885$var$game.checkWin();\n        if ($197cd56b15c33885$var$game.status === 'win') $197cd56b15c33885$var$winMessage.classList.remove('hidden');\n        else if ($197cd56b15c33885$var$game.status === 'lose') $197cd56b15c33885$var$loseMessage.classList.remove('hidden');\n        $197cd56b15c33885$var$updateBoard();\n    }\n}\nfunction $197cd56b15c33885$var$updateBoard() {\n    var currentState = $197cd56b15c33885$var$game.getState();\n    for(var row = 0; row < 4; row++){\n        for(var col = 0; col < 4; col++)if (currentState[row][col]) {\n            $197cd56b15c33885$var$rows[row].children[col].textContent = currentState[row][col];\n            $197cd56b15c33885$var$rows[row].children[col].setAttribute('class', \"field-cell field-cell--\".concat(currentState[row][col]));\n        } else {\n            $197cd56b15c33885$var$rows[row].children[col].textContent = '';\n            $197cd56b15c33885$var$rows[row].children[col].setAttribute('class', 'field-cell field-cell--empty');\n        }\n    }\n}\n\n})();\n//# sourceMappingURL=index.8d0ce20a.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst startButton = document.querySelector('.start');\nconst rows = document.querySelectorAll('.field-row');\nconst score = document.querySelector('.game-score');\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('restart')) {\n    loseMessage.classList.add('hidden');\n    winMessage.classList.add('hidden');\n    game.restart();\n    updateBoard();\n    score.textContent = 0;\n  } else {\n    startMessage.classList.add('hidden');\n    game.start();\n    updateBoard();\n  }\n});\n\ndocument.addEventListener('keydown', handleMove);\n\nlet touchStartX = 0;\nlet touchStartY = 0;\nlet touchEndX = 0;\nlet touchEndY = 0;\n\ndocument.addEventListener('touchstart', (ev) => {\n  touchStartX = ev.touches[0].clientX;\n  touchStartY = ev.touches[0].clientY;\n});\n\ndocument.addEventListener(\n  'touchmove',\n  (ev) => {\n    ev.preventDefault();\n  },\n  { passive: false },\n);\n\ndocument.addEventListener('touchend', (ev) => {\n  touchEndX = ev.changedTouches[0].clientX;\n  touchEndY = ev.changedTouches[0].clientY;\n  handleSwipe();\n});\n\nfunction handleSwipe() {\n  const diffX = touchEndX - touchStartX;\n  const diffY = touchEndY - touchStartY;\n\n  if (Math.abs(diffX) > Math.abs(diffY)) {\n    if (diffX > 50) {\n      handleMove({ key: 'ArrowRight' });\n    } else if (diffX < -50) {\n      handleMove({ key: 'ArrowLeft' });\n    }\n  } else {\n    if (diffY > 50) {\n      handleMove({ key: 'ArrowDown' });\n    } else if (diffY < -50) {\n      handleMove({ key: 'ArrowUp' });\n    }\n  }\n}\n\nfunction handleMove(ev) {\n  if (game.status === 'lose') {\n    return;\n  }\n\n  if (startMessage.classList.contains('hidden')) {\n    startButton.setAttribute('class', 'button restart');\n    startButton.textContent = 'Restart';\n\n    switch (ev.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n\n    score.textContent = game.score;\n    game.checkWin();\n\n    if (game.status === 'win') {\n      winMessage.classList.remove('hidden');\n    } else if (game.status === 'lose') {\n      loseMessage.classList.remove('hidden');\n    }\n\n    updateBoard();\n  }\n}\n\nfunction updateBoard() {\n  const currentState = game.getState();\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 4; col++) {\n      if (currentState[row][col]) {\n        rows[row].children[col].textContent = currentState[row][col];\n\n        rows[row].children[col].setAttribute(\n          'class',\n          `field-cell field-cell--${currentState[row][col]}`,\n        );\n      } else {\n        rows[row].children[col].textContent = '';\n\n        rows[row].children[col].setAttribute(\n          'class',\n          'field-cell field-cell--empty',\n        );\n      }\n    }\n  }\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  score = 0;\n  status = 'idle';\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    if (initialState) {\n      this.initialState = initialState.map((row) => [...row]);\n      this.board = initialState;\n    }\n  }\n\n  moveLeft() {\n    if (this.status === 'idle') {\n      return;\n    }\n\n    const newState = [];\n    const currectScore = this.score;\n\n    for (const row of this.board) {\n      const newRow = row.filter((cell) => cell !== 0);\n\n      for (let i = 1; i < newRow.length; i++) {\n        if (newRow[i] === newRow[i - 1]) {\n          const sum = newRow[i] + newRow[i - 1];\n\n          this.score += sum;\n          newRow.splice(i - 1, 2, sum);\n        }\n      }\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      newState.push(newRow);\n    }\n\n    if (this.deepEqualBoards(newState, this.board) === true) {\n      return;\n    }\n\n    this.board = newState;\n\n    if (this.checkWin()) {\n      this.status = 'win';\n    }\n\n    if (\n      currectScore === this.score &&\n      this.getEmptyCells().length === 0 &&\n      this.checkAvailableMoves() === false\n    ) {\n      this.status = 'lose';\n\n      return;\n    }\n\n    this.setRandomNumberOnCell();\n\n    if (\n      this.getEmptyCells().length === 0 &&\n      this.checkAvailableMoves() === false\n    ) {\n      this.status = 'lose';\n    }\n  }\n\n  moveRight() {\n    if (this.status === 'idle') {\n      return;\n    }\n\n    const newState = [];\n    const currectScore = this.score;\n\n    for (const row of this.board) {\n      const newRow = row.filter((cell) => cell !== 0);\n\n      for (let i = newRow.length - 2; i >= 0; i--) {\n        if (newRow[i] === newRow[i + 1]) {\n          const sum = newRow[i] + newRow[i + 1];\n\n          this.score += sum;\n          newRow.splice(i, 2, sum);\n          i--;\n        }\n      }\n\n      while (newRow.length < 4) {\n        newRow.unshift(0);\n      }\n\n      newState.push(newRow);\n    }\n\n    if (this.deepEqualBoards(newState, this.board) === true) {\n      return;\n    }\n\n    this.board = newState;\n\n    if (this.checkWin()) {\n      this.status = 'win';\n    }\n\n    if (\n      currectScore === this.score &&\n      this.getEmptyCells().length === 0 &&\n      this.checkAvailableMoves() === false\n    ) {\n      this.status = 'lose';\n\n      return;\n    }\n\n    this.setRandomNumberOnCell();\n\n    if (\n      this.getEmptyCells().length === 0 &&\n      this.checkAvailableMoves() === false\n    ) {\n      this.status = 'lose';\n    }\n  }\n\n  moveUp() {\n    if (this.status === 'idle') {\n      return;\n    }\n\n    const currectScore = this.score;\n    const columns = Array.from({ length: 4 }, () => []);\n    const newState = Array.from({ length: 4 }, () => []);\n    const newStateColumns = [];\n\n    for (let col = 0; col < 4; col++) {\n      for (let row = 0; row < 4; row++) {\n        columns[col].push(this.board[row][col]);\n      }\n    }\n\n    for (const col of columns) {\n      const newCol = col.filter((cell) => cell !== 0);\n\n      for (let i = 1; i < newCol.length; i++) {\n        if (newCol[i] === newCol[i - 1]) {\n          const sum = newCol[i] + newCol[i - 1];\n\n          this.score += sum;\n          newCol.splice(i - 1, 2, sum);\n        }\n      }\n\n      while (newCol.length < 4) {\n        newCol.push(0);\n      }\n\n      newStateColumns.push(newCol);\n    }\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        newState[row].push(newStateColumns[col][row]);\n      }\n    }\n\n    if (this.deepEqualBoards(newState, this.board) === true) {\n      return;\n    }\n\n    this.board = newState;\n\n    if (this.checkWin()) {\n      this.status = 'win';\n    }\n\n    if (\n      currectScore === this.score &&\n      this.getEmptyCells().length === 0 &&\n      this.checkAvailableMoves() === false\n    ) {\n      this.status = 'lose';\n\n      return;\n    }\n\n    this.setRandomNumberOnCell();\n\n    if (\n      this.getEmptyCells().length === 0 &&\n      this.checkAvailableMoves() === false\n    ) {\n      this.status = 'lose';\n    }\n  }\n\n  moveDown() {\n    if (this.status === 'idle') {\n      return;\n    }\n\n    const currectScore = this.score;\n    const columns = Array.from({ length: 4 }, () => []);\n    const newState = Array.from({ length: 4 }, () => []);\n    const newStateColumns = [];\n\n    for (let col = 0; col < 4; col++) {\n      for (let row = 0; row < 4; row++) {\n        columns[col].push(this.board[row][col]);\n      }\n    }\n\n    for (const col of columns) {\n      const newCol = col.filter((cell) => cell !== 0);\n\n      for (let i = newCol.length - 2; i >= 0; i--) {\n        if (newCol[i] === newCol[i + 1]) {\n          const sum = newCol[i] + newCol[i + 1];\n\n          this.score += sum;\n          newCol.splice(i, 2, sum);\n\n          i--;\n        }\n      }\n\n      while (newCol.length < 4) {\n        newCol.unshift(0);\n      }\n\n      newStateColumns.push(newCol);\n    }\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        newState[row].push(newStateColumns[col][row]);\n      }\n    }\n\n    if (this.deepEqualBoards(newState, this.board) === true) {\n      return;\n    }\n\n    this.board = newState;\n\n    if (this.checkWin()) {\n      this.status = 'win';\n    }\n\n    if (\n      currectScore === this.score &&\n      this.getEmptyCells().length === 0 &&\n      this.checkAvailableMoves() === false\n    ) {\n      this.status = 'lose';\n\n      return;\n    }\n\n    this.setRandomNumberOnCell();\n\n    if (\n      this.getEmptyCells().length === 0 &&\n      this.checkAvailableMoves() === false\n    ) {\n      this.status = 'lose';\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (this.status !== 'playing') {\n      this.setRandomNumberOnCell();\n      this.status = 'playing';\n    } else {\n      this.board = this.initialState || [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n      ];\n\n      this.setRandomNumberOnCell();\n      this.setRandomNumberOnCell();\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.score = 0;\n\n    this.board = this.initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    if (this.initialState) {\n      this.status = 'idle';\n\n      return;\n    }\n\n    this.status = 'idle';\n    this.setRandomNumberOnCell();\n    this.status = 'playing';\n  }\n\n  setRandomNumberOnCell() {\n    const emptyCells = this.getEmptyCells();\n\n    if (this.status === 'idle' && emptyCells.length >= 2) {\n      const indexEmptyCell1 = Math.floor(Math.random() * emptyCells.length);\n      let indexEmptyCell2;\n\n      do {\n        indexEmptyCell2 = Math.floor(Math.random() * emptyCells.length);\n      } while (indexEmptyCell1 === indexEmptyCell2);\n\n      this.board[emptyCells[indexEmptyCell1].row][\n        emptyCells[indexEmptyCell1].col\n      ] = Math.random() <= 0.1 ? 4 : 2;\n\n      this.board[emptyCells[indexEmptyCell2].row][\n        emptyCells[indexEmptyCell2].col\n      ] = Math.random() <= 0.1 ? 4 : 2;\n    } else if (emptyCells.length >= 1) {\n      const indexEmptyCell = Math.floor(Math.random() * emptyCells.length);\n\n      this.board[emptyCells[indexEmptyCell].row][\n        emptyCells[indexEmptyCell].col\n      ] = Math.random() <= 0.1 ? 4 : 2;\n    }\n  }\n\n  getEmptyCells() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    return emptyCells;\n  }\n\n  checkAvailableMoves() {\n    let canMerge = false;\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (col < 3 && this.board[row][col] === this.board[row][col + 1]) {\n          canMerge = true;\n        }\n\n        if (row < 3 && this.board[row][col] === this.board[row + 1][col]) {\n          canMerge = true;\n        }\n      }\n    }\n\n    return canMerge;\n  }\n\n  checkWin() {\n    let gameWin = false;\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 2048) {\n          gameWin = true;\n          this.status = 'win';\n        }\n      }\n    }\n\n    return gameWin;\n  }\n\n  deepEqualBoards(board1, board2) {\n    return board1.every((row, rowIndex) =>\n      // eslint-disable-next-line prettier/prettier\n      row.every((cell, colIndex) => cell === board2[rowIndex][colIndex]));\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$3d28d7f1aac198f5$exports","$cd5a47cf8ef6d766$export$71511d61b312f219","obj","key","value","Object","defineProperty","enumerable","configurable","writable","$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$197cd56b15c33885$var$game","protoProps","Game","initialState","instance","Constructor","TypeError","map","row","isArray","iter","Symbol","iterator","from","o","minLen","n","prototype","toString","call","slice","constructor","name","test","board","status","newState","currectScore","score","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","newRow","filter","cell","sum","splice","push","err","return","deepEqualBoards","checkWin","getEmptyCells","checkAvailableMoves","setRandomNumberOnCell","unshift","columns","newStateColumns","col","newCol","col1","row1","col2","emptyCells","indexEmptyCell2","indexEmptyCell1","Math","floor","random","indexEmptyCell","canMerge","gameWin","board1","board2","every","rowIndex","colIndex","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","$197cd56b15c33885$var$startMessage","document","querySelector","$197cd56b15c33885$var$winMessage","$197cd56b15c33885$var$loseMessage","$197cd56b15c33885$var$startButton","$197cd56b15c33885$var$rows","querySelectorAll","$197cd56b15c33885$var$score","addEventListener","classList","contains","add","restart","$197cd56b15c33885$var$updateBoard","textContent","start","$197cd56b15c33885$var$handleMove","$197cd56b15c33885$var$touchStartX","$197cd56b15c33885$var$touchStartY","$197cd56b15c33885$var$touchEndX","$197cd56b15c33885$var$touchEndY","ev","setAttribute","moveLeft","moveRight","moveUp","moveDown","remove","currentState","getState","children","concat","touches","clientX","clientY","preventDefault","passive","diffX","diffY","changedTouches","abs"],"version":3,"file":"index.8d0ce20a.js.map"}