{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["'use strict';\nvar $a5fd07fa01589658$exports = {};\n'use strict';\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    score = 0;\n    status = 'idle';\n    board = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        if (initialState) {\n            this.initialState = initialState.map((row)=>[\n                    ...row\n                ]);\n            this.board = initialState;\n        }\n    }\n    moveLeft() {\n        if (this.status === 'idle') return;\n        const newState = [];\n        const currectScore = this.score;\n        for (const row of this.board){\n            const newRow = row.filter((cell)=>cell !== 0);\n            for(let i = 1; i < newRow.length; i++)if (newRow[i] === newRow[i - 1]) {\n                const sum = newRow[i] + newRow[i - 1];\n                this.score += sum;\n                newRow.splice(i - 1, 2, sum);\n            }\n            while(newRow.length < 4)newRow.push(0);\n            newState.push(newRow);\n        }\n        if (this.deepEqualBoards(newState, this.board) === true) return;\n        this.board = newState;\n        if (this.checkWin()) this.status = 'win';\n        if (currectScore === this.score && this.getEmptyCells().length === 0 && this.checkAvailableMoves() === false) {\n            this.status = 'lose';\n            return;\n        }\n        this.setRandomNumberOnCell();\n        if (this.getEmptyCells().length === 0 && this.checkAvailableMoves() === false) this.status = 'lose';\n    }\n    moveRight() {\n        if (this.status === 'idle') return;\n        const newState = [];\n        const currectScore = this.score;\n        for (const row of this.board){\n            const newRow = row.filter((cell)=>cell !== 0);\n            for(let i = newRow.length - 2; i >= 0; i--)if (newRow[i] === newRow[i + 1]) {\n                const sum = newRow[i] + newRow[i + 1];\n                this.score += sum;\n                newRow.splice(i, 2, sum);\n                i--;\n            }\n            while(newRow.length < 4)newRow.unshift(0);\n            newState.push(newRow);\n        }\n        if (this.deepEqualBoards(newState, this.board) === true) return;\n        this.board = newState;\n        if (this.checkWin()) this.status = 'win';\n        if (currectScore === this.score && this.getEmptyCells().length === 0 && this.checkAvailableMoves() === false) {\n            this.status = 'lose';\n            return;\n        }\n        this.setRandomNumberOnCell();\n        if (this.getEmptyCells().length === 0 && this.checkAvailableMoves() === false) this.status = 'lose';\n    }\n    moveUp() {\n        if (this.status === 'idle') return;\n        const currectScore = this.score;\n        const columns = Array.from({\n            length: 4\n        }, ()=>[]);\n        const newState = Array.from({\n            length: 4\n        }, ()=>[]);\n        const newStateColumns = [];\n        for(let col = 0; col < 4; col++)for(let row = 0; row < 4; row++)columns[col].push(this.board[row][col]);\n        for (const col of columns){\n            const newCol = col.filter((cell)=>cell !== 0);\n            for(let i = 1; i < newCol.length; i++)if (newCol[i] === newCol[i - 1]) {\n                const sum = newCol[i] + newCol[i - 1];\n                this.score += sum;\n                newCol.splice(i - 1, 2, sum);\n            }\n            while(newCol.length < 4)newCol.push(0);\n            newStateColumns.push(newCol);\n        }\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++)newState[row].push(newStateColumns[col][row]);\n        if (this.deepEqualBoards(newState, this.board) === true) return;\n        this.board = newState;\n        if (this.checkWin()) this.status = 'win';\n        if (currectScore === this.score && this.getEmptyCells().length === 0 && this.checkAvailableMoves() === false) {\n            this.status = 'lose';\n            return;\n        }\n        this.setRandomNumberOnCell();\n        if (this.getEmptyCells().length === 0 && this.checkAvailableMoves() === false) this.status = 'lose';\n    }\n    moveDown() {\n        if (this.status === 'idle') return;\n        const currectScore = this.score;\n        const columns = Array.from({\n            length: 4\n        }, ()=>[]);\n        const newState = Array.from({\n            length: 4\n        }, ()=>[]);\n        const newStateColumns = [];\n        for(let col = 0; col < 4; col++)for(let row = 0; row < 4; row++)columns[col].push(this.board[row][col]);\n        for (const col of columns){\n            const newCol = col.filter((cell)=>cell !== 0);\n            for(let i = newCol.length - 2; i >= 0; i--)if (newCol[i] === newCol[i + 1]) {\n                const sum = newCol[i] + newCol[i + 1];\n                this.score += sum;\n                newCol.splice(i, 2, sum);\n                i--;\n            }\n            while(newCol.length < 4)newCol.unshift(0);\n            newStateColumns.push(newCol);\n        }\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++)newState[row].push(newStateColumns[col][row]);\n        if (this.deepEqualBoards(newState, this.board) === true) return;\n        this.board = newState;\n        if (this.checkWin()) this.status = 'win';\n        if (currectScore === this.score && this.getEmptyCells().length === 0 && this.checkAvailableMoves() === false) {\n            this.status = 'lose';\n            return;\n        }\n        this.setRandomNumberOnCell();\n        if (this.getEmptyCells().length === 0 && this.checkAvailableMoves() === false) this.status = 'lose';\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        if (this.status !== 'playing') {\n            this.setRandomNumberOnCell();\n            this.status = 'playing';\n        } else {\n            this.board = this.initialState || [\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ]\n            ];\n            this.setRandomNumberOnCell();\n            this.setRandomNumberOnCell();\n        }\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.score = 0;\n        this.board = this.initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        if (this.initialState) {\n            this.status = 'idle';\n            return;\n        }\n        this.status = 'idle';\n        this.setRandomNumberOnCell();\n        this.status = 'playing';\n    }\n    setRandomNumberOnCell() {\n        const emptyCells = this.getEmptyCells();\n        if (this.status === 'idle' && emptyCells.length >= 2) {\n            const indexEmptyCell1 = Math.floor(Math.random() * emptyCells.length);\n            let indexEmptyCell2;\n            do indexEmptyCell2 = Math.floor(Math.random() * emptyCells.length);\n            while (indexEmptyCell1 === indexEmptyCell2);\n            this.board[emptyCells[indexEmptyCell1].row][emptyCells[indexEmptyCell1].col] = Math.random() <= 0.1 ? 4 : 2;\n            this.board[emptyCells[indexEmptyCell2].row][emptyCells[indexEmptyCell2].col] = Math.random() <= 0.1 ? 4 : 2;\n        } else if (emptyCells.length >= 1) {\n            const indexEmptyCell = Math.floor(Math.random() * emptyCells.length);\n            this.board[emptyCells[indexEmptyCell].row][emptyCells[indexEmptyCell].col] = Math.random() <= 0.1 ? 4 : 2;\n        }\n    }\n    getEmptyCells() {\n        const emptyCells = [];\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.board[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        return emptyCells;\n    }\n    checkAvailableMoves() {\n        let canMerge = false;\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (col < 3 && this.board[row][col] === this.board[row][col + 1]) canMerge = true;\n            if (row < 3 && this.board[row][col] === this.board[row + 1][col]) canMerge = true;\n        }\n        return canMerge;\n    }\n    checkWin() {\n        let gameWin = false;\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.board[row][col] === 2048) {\n                gameWin = true;\n                this.status = 'win';\n            }\n        }\n        return gameWin;\n    }\n    deepEqualBoards(board1, board2) {\n        return board1.every((row, rowIndex)=>// eslint-disable-next-line prettier/prettier\n            row.every((cell, colIndex)=>cell === board2[rowIndex][colIndex]));\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startMessage = document.querySelector('.message-start');\nconst $09e991522ca7e64e$var$winMessage = document.querySelector('.message-win');\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector('.message-lose');\nconst $09e991522ca7e64e$var$startButton = document.querySelector('.start');\nconst $09e991522ca7e64e$var$rows = document.querySelectorAll('.field-row');\nconst $09e991522ca7e64e$var$score = document.querySelector('.game-score');\n$09e991522ca7e64e$var$startButton.addEventListener('click', ()=>{\n    if ($09e991522ca7e64e$var$startButton.classList.contains('restart')) {\n        $09e991522ca7e64e$var$loseMessage.classList.add('hidden');\n        $09e991522ca7e64e$var$winMessage.classList.add('hidden');\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$updateBoard();\n        $09e991522ca7e64e$var$score.textContent = 0;\n    } else {\n        $09e991522ca7e64e$var$startMessage.classList.add('hidden');\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$updateBoard();\n    }\n});\ndocument.addEventListener('keydown', $09e991522ca7e64e$var$handleMove);\nlet $09e991522ca7e64e$var$touchStartX = 0;\nlet $09e991522ca7e64e$var$touchStartY = 0;\nlet $09e991522ca7e64e$var$touchEndX = 0;\nlet $09e991522ca7e64e$var$touchEndY = 0;\ndocument.addEventListener('touchstart', (ev)=>{\n    $09e991522ca7e64e$var$touchStartX = ev.touches[0].clientX;\n    $09e991522ca7e64e$var$touchStartY = ev.touches[0].clientY;\n});\ndocument.addEventListener('touchmove', (ev)=>{\n    ev.preventDefault();\n}, {\n    passive: false\n});\ndocument.addEventListener('touchend', (ev)=>{\n    $09e991522ca7e64e$var$touchEndX = ev.changedTouches[0].clientX;\n    $09e991522ca7e64e$var$touchEndY = ev.changedTouches[0].clientY;\n    $09e991522ca7e64e$var$handleSwipe();\n});\nfunction $09e991522ca7e64e$var$handleSwipe() {\n    const diffX = $09e991522ca7e64e$var$touchEndX - $09e991522ca7e64e$var$touchStartX;\n    const diffY = $09e991522ca7e64e$var$touchEndY - $09e991522ca7e64e$var$touchStartY;\n    if (Math.abs(diffX) > Math.abs(diffY)) {\n        if (diffX > 50) $09e991522ca7e64e$var$handleMove({\n            key: 'ArrowRight'\n        });\n        else if (diffX < -50) $09e991522ca7e64e$var$handleMove({\n            key: 'ArrowLeft'\n        });\n    } else {\n        if (diffY > 50) $09e991522ca7e64e$var$handleMove({\n            key: 'ArrowDown'\n        });\n        else if (diffY < -50) $09e991522ca7e64e$var$handleMove({\n            key: 'ArrowUp'\n        });\n    }\n}\nfunction $09e991522ca7e64e$var$handleMove(ev) {\n    if ($09e991522ca7e64e$var$game.status === 'lose') return;\n    if ($09e991522ca7e64e$var$startMessage.classList.contains('hidden')) {\n        $09e991522ca7e64e$var$startButton.setAttribute('class', 'button restart');\n        $09e991522ca7e64e$var$startButton.textContent = 'Restart';\n        switch(ev.key){\n            case 'ArrowLeft':\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case 'ArrowRight':\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n            case 'ArrowUp':\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case 'ArrowDown':\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n        }\n        $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.score;\n        $09e991522ca7e64e$var$game.checkWin();\n        if ($09e991522ca7e64e$var$game.status === 'win') $09e991522ca7e64e$var$winMessage.classList.remove('hidden');\n        else if ($09e991522ca7e64e$var$game.status === 'lose') $09e991522ca7e64e$var$loseMessage.classList.remove('hidden');\n        $09e991522ca7e64e$var$updateBoard();\n    }\n}\nfunction $09e991522ca7e64e$var$updateBoard() {\n    const currentState = $09e991522ca7e64e$var$game.getState();\n    for(let row = 0; row < 4; row++){\n        for(let col = 0; col < 4; col++)if (currentState[row][col]) {\n            $09e991522ca7e64e$var$rows[row].children[col].textContent = currentState[row][col];\n            $09e991522ca7e64e$var$rows[row].children[col].setAttribute('class', `field-cell field-cell--${currentState[row][col]}`);\n        } else {\n            $09e991522ca7e64e$var$rows[row].children[col].textContent = '';\n            $09e991522ca7e64e$var$rows[row].children[col].setAttribute('class', 'field-cell field-cell--empty');\n        }\n    }\n}\n\n\n//# sourceMappingURL=index.0cd8c2a4.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst startButton = document.querySelector('.start');\nconst rows = document.querySelectorAll('.field-row');\nconst score = document.querySelector('.game-score');\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('restart')) {\n    loseMessage.classList.add('hidden');\n    winMessage.classList.add('hidden');\n    game.restart();\n    updateBoard();\n    score.textContent = 0;\n  } else {\n    startMessage.classList.add('hidden');\n    game.start();\n    updateBoard();\n  }\n});\n\ndocument.addEventListener('keydown', handleMove);\n\nlet touchStartX = 0;\nlet touchStartY = 0;\nlet touchEndX = 0;\nlet touchEndY = 0;\n\ndocument.addEventListener('touchstart', (ev) => {\n  touchStartX = ev.touches[0].clientX;\n  touchStartY = ev.touches[0].clientY;\n});\n\ndocument.addEventListener(\n  'touchmove',\n  (ev) => {\n    ev.preventDefault();\n  },\n  { passive: false },\n);\n\ndocument.addEventListener('touchend', (ev) => {\n  touchEndX = ev.changedTouches[0].clientX;\n  touchEndY = ev.changedTouches[0].clientY;\n  handleSwipe();\n});\n\nfunction handleSwipe() {\n  const diffX = touchEndX - touchStartX;\n  const diffY = touchEndY - touchStartY;\n\n  if (Math.abs(diffX) > Math.abs(diffY)) {\n    if (diffX > 50) {\n      handleMove({ key: 'ArrowRight' });\n    } else if (diffX < -50) {\n      handleMove({ key: 'ArrowLeft' });\n    }\n  } else {\n    if (diffY > 50) {\n      handleMove({ key: 'ArrowDown' });\n    } else if (diffY < -50) {\n      handleMove({ key: 'ArrowUp' });\n    }\n  }\n}\n\nfunction handleMove(ev) {\n  if (game.status === 'lose') {\n    return;\n  }\n\n  if (startMessage.classList.contains('hidden')) {\n    startButton.setAttribute('class', 'button restart');\n    startButton.textContent = 'Restart';\n\n    switch (ev.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n\n    score.textContent = game.score;\n    game.checkWin();\n\n    if (game.status === 'win') {\n      winMessage.classList.remove('hidden');\n    } else if (game.status === 'lose') {\n      loseMessage.classList.remove('hidden');\n    }\n\n    updateBoard();\n  }\n}\n\nfunction updateBoard() {\n  const currentState = game.getState();\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 4; col++) {\n      if (currentState[row][col]) {\n        rows[row].children[col].textContent = currentState[row][col];\n\n        rows[row].children[col].setAttribute(\n          'class',\n          `field-cell field-cell--${currentState[row][col]}`,\n        );\n      } else {\n        rows[row].children[col].textContent = '';\n\n        rows[row].children[col].setAttribute(\n          'class',\n          'field-cell field-cell--empty',\n        );\n      }\n    }\n  }\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  score = 0;\n  status = 'idle';\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    if (initialState) {\n      this.initialState = initialState.map((row) => [...row]);\n      this.board = initialState;\n    }\n  }\n\n  moveLeft() {\n    if (this.status === 'idle') {\n      return;\n    }\n\n    const newState = [];\n    const currectScore = this.score;\n\n    for (const row of this.board) {\n      const newRow = row.filter((cell) => cell !== 0);\n\n      for (let i = 1; i < newRow.length; i++) {\n        if (newRow[i] === newRow[i - 1]) {\n          const sum = newRow[i] + newRow[i - 1];\n\n          this.score += sum;\n          newRow.splice(i - 1, 2, sum);\n        }\n      }\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      newState.push(newRow);\n    }\n\n    if (this.deepEqualBoards(newState, this.board) === true) {\n      return;\n    }\n\n    this.board = newState;\n\n    if (this.checkWin()) {\n      this.status = 'win';\n    }\n\n    if (\n      currectScore === this.score &&\n      this.getEmptyCells().length === 0 &&\n      this.checkAvailableMoves() === false\n    ) {\n      this.status = 'lose';\n\n      return;\n    }\n\n    this.setRandomNumberOnCell();\n\n    if (\n      this.getEmptyCells().length === 0 &&\n      this.checkAvailableMoves() === false\n    ) {\n      this.status = 'lose';\n    }\n  }\n\n  moveRight() {\n    if (this.status === 'idle') {\n      return;\n    }\n\n    const newState = [];\n    const currectScore = this.score;\n\n    for (const row of this.board) {\n      const newRow = row.filter((cell) => cell !== 0);\n\n      for (let i = newRow.length - 2; i >= 0; i--) {\n        if (newRow[i] === newRow[i + 1]) {\n          const sum = newRow[i] + newRow[i + 1];\n\n          this.score += sum;\n          newRow.splice(i, 2, sum);\n          i--;\n        }\n      }\n\n      while (newRow.length < 4) {\n        newRow.unshift(0);\n      }\n\n      newState.push(newRow);\n    }\n\n    if (this.deepEqualBoards(newState, this.board) === true) {\n      return;\n    }\n\n    this.board = newState;\n\n    if (this.checkWin()) {\n      this.status = 'win';\n    }\n\n    if (\n      currectScore === this.score &&\n      this.getEmptyCells().length === 0 &&\n      this.checkAvailableMoves() === false\n    ) {\n      this.status = 'lose';\n\n      return;\n    }\n\n    this.setRandomNumberOnCell();\n\n    if (\n      this.getEmptyCells().length === 0 &&\n      this.checkAvailableMoves() === false\n    ) {\n      this.status = 'lose';\n    }\n  }\n\n  moveUp() {\n    if (this.status === 'idle') {\n      return;\n    }\n\n    const currectScore = this.score;\n    const columns = Array.from({ length: 4 }, () => []);\n    const newState = Array.from({ length: 4 }, () => []);\n    const newStateColumns = [];\n\n    for (let col = 0; col < 4; col++) {\n      for (let row = 0; row < 4; row++) {\n        columns[col].push(this.board[row][col]);\n      }\n    }\n\n    for (const col of columns) {\n      const newCol = col.filter((cell) => cell !== 0);\n\n      for (let i = 1; i < newCol.length; i++) {\n        if (newCol[i] === newCol[i - 1]) {\n          const sum = newCol[i] + newCol[i - 1];\n\n          this.score += sum;\n          newCol.splice(i - 1, 2, sum);\n        }\n      }\n\n      while (newCol.length < 4) {\n        newCol.push(0);\n      }\n\n      newStateColumns.push(newCol);\n    }\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        newState[row].push(newStateColumns[col][row]);\n      }\n    }\n\n    if (this.deepEqualBoards(newState, this.board) === true) {\n      return;\n    }\n\n    this.board = newState;\n\n    if (this.checkWin()) {\n      this.status = 'win';\n    }\n\n    if (\n      currectScore === this.score &&\n      this.getEmptyCells().length === 0 &&\n      this.checkAvailableMoves() === false\n    ) {\n      this.status = 'lose';\n\n      return;\n    }\n\n    this.setRandomNumberOnCell();\n\n    if (\n      this.getEmptyCells().length === 0 &&\n      this.checkAvailableMoves() === false\n    ) {\n      this.status = 'lose';\n    }\n  }\n\n  moveDown() {\n    if (this.status === 'idle') {\n      return;\n    }\n\n    const currectScore = this.score;\n    const columns = Array.from({ length: 4 }, () => []);\n    const newState = Array.from({ length: 4 }, () => []);\n    const newStateColumns = [];\n\n    for (let col = 0; col < 4; col++) {\n      for (let row = 0; row < 4; row++) {\n        columns[col].push(this.board[row][col]);\n      }\n    }\n\n    for (const col of columns) {\n      const newCol = col.filter((cell) => cell !== 0);\n\n      for (let i = newCol.length - 2; i >= 0; i--) {\n        if (newCol[i] === newCol[i + 1]) {\n          const sum = newCol[i] + newCol[i + 1];\n\n          this.score += sum;\n          newCol.splice(i, 2, sum);\n\n          i--;\n        }\n      }\n\n      while (newCol.length < 4) {\n        newCol.unshift(0);\n      }\n\n      newStateColumns.push(newCol);\n    }\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        newState[row].push(newStateColumns[col][row]);\n      }\n    }\n\n    if (this.deepEqualBoards(newState, this.board) === true) {\n      return;\n    }\n\n    this.board = newState;\n\n    if (this.checkWin()) {\n      this.status = 'win';\n    }\n\n    if (\n      currectScore === this.score &&\n      this.getEmptyCells().length === 0 &&\n      this.checkAvailableMoves() === false\n    ) {\n      this.status = 'lose';\n\n      return;\n    }\n\n    this.setRandomNumberOnCell();\n\n    if (\n      this.getEmptyCells().length === 0 &&\n      this.checkAvailableMoves() === false\n    ) {\n      this.status = 'lose';\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (this.status !== 'playing') {\n      this.setRandomNumberOnCell();\n      this.status = 'playing';\n    } else {\n      this.board = this.initialState || [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n      ];\n\n      this.setRandomNumberOnCell();\n      this.setRandomNumberOnCell();\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.score = 0;\n\n    this.board = this.initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    if (this.initialState) {\n      this.status = 'idle';\n\n      return;\n    }\n\n    this.status = 'idle';\n    this.setRandomNumberOnCell();\n    this.status = 'playing';\n  }\n\n  setRandomNumberOnCell() {\n    const emptyCells = this.getEmptyCells();\n\n    if (this.status === 'idle' && emptyCells.length >= 2) {\n      const indexEmptyCell1 = Math.floor(Math.random() * emptyCells.length);\n      let indexEmptyCell2;\n\n      do {\n        indexEmptyCell2 = Math.floor(Math.random() * emptyCells.length);\n      } while (indexEmptyCell1 === indexEmptyCell2);\n\n      this.board[emptyCells[indexEmptyCell1].row][\n        emptyCells[indexEmptyCell1].col\n      ] = Math.random() <= 0.1 ? 4 : 2;\n\n      this.board[emptyCells[indexEmptyCell2].row][\n        emptyCells[indexEmptyCell2].col\n      ] = Math.random() <= 0.1 ? 4 : 2;\n    } else if (emptyCells.length >= 1) {\n      const indexEmptyCell = Math.floor(Math.random() * emptyCells.length);\n\n      this.board[emptyCells[indexEmptyCell].row][\n        emptyCells[indexEmptyCell].col\n      ] = Math.random() <= 0.1 ? 4 : 2;\n    }\n  }\n\n  getEmptyCells() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    return emptyCells;\n  }\n\n  checkAvailableMoves() {\n    let canMerge = false;\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (col < 3 && this.board[row][col] === this.board[row][col + 1]) {\n          canMerge = true;\n        }\n\n        if (row < 3 && this.board[row][col] === this.board[row + 1][col]) {\n          canMerge = true;\n        }\n      }\n    }\n\n    return canMerge;\n  }\n\n  checkWin() {\n    let gameWin = false;\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 2048) {\n          gameWin = true;\n          this.status = 'win';\n        }\n      }\n    }\n\n    return gameWin;\n  }\n\n  deepEqualBoards(board1, board2) {\n    return board1.every((row, rowIndex) =>\n      // eslint-disable-next-line prettier/prettier\n      row.every((cell, colIndex) => cell === board2[rowIndex][colIndex]));\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$09e991522ca7e64e$var$game","score","status","board","constructor","initialState","map","row","moveLeft","newState","currectScore","newRow","filter","cell","i","length","sum","splice","push","deepEqualBoards","checkWin","getEmptyCells","checkAvailableMoves","setRandomNumberOnCell","moveRight","unshift","moveUp","columns","Array","from","newStateColumns","col","newCol","moveDown","getScore","getState","getStatus","start","restart","emptyCells","indexEmptyCell2","indexEmptyCell1","Math","floor","random","indexEmptyCell","canMerge","gameWin","board1","board2","every","rowIndex","colIndex","$09e991522ca7e64e$var$startMessage","document","querySelector","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$rows","querySelectorAll","$09e991522ca7e64e$var$score","addEventListener","classList","contains","add","$09e991522ca7e64e$var$updateBoard","textContent","$09e991522ca7e64e$var$handleMove","$09e991522ca7e64e$var$touchStartX","$09e991522ca7e64e$var$touchStartY","$09e991522ca7e64e$var$touchEndX","$09e991522ca7e64e$var$touchEndY","ev","setAttribute","key","remove","currentState","children","touches","clientX","clientY","preventDefault","passive","changedTouches","$09e991522ca7e64e$var$handleSwipe","diffX","diffY","abs"],"version":3,"file":"index.0cd8c2a4.js.map"}